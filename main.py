import random
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç–∞–∫–∏
MOVES = [
    ("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–°–°", "–°–°"),
    ("–¢–†", "–¢–†"), ("–¢–†", "–°–°"), ("–¢–†", "–î–ó"),
    ("–î–ó", "–¢–†"), ("–î–ó", "–°–°"), ("–î–ó", "–ì–î–ù")
]

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—â–∏—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
DEFENSE_MOVES = {
    "–ê–≥–µ —É–∫–µ": {"defense": "–°–°", "counter": ["–î–ó", "–¢–†"]},
    "–£—á–∏ —É–∫–µ": {"defense": "–°–°", "counter": ["–î–ó", "–¢–†"]},
    "–°–æ—Ç–æ —É–∫–µ": {"defense": "–¢–†", "counter": ["–î–ó", "–°–°"]},
    "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π": {"defense": "–î–ó", "counter": ["–¢–†", "–°–°", "–ì–î–ù"]}
}

# –§—Ä–∞–∑—ã –¥–ª—è –ª–æ–≥–æ–≤ (5-10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
ATTACK_PHRASES = {
    "control_success": {
        "–ì–î–ù": ["–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –ø—Ä–æ–≤–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∏–∂–µ –ø–æ—è—Å–∞ ‚ö°", "—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏–ª –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –ø–æ—è—Å–∞ ‚ö°", "—Ç–æ—á–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –Ω–æ–≥–∏ ‚ö°", "–±—ã—Å—Ç—Ä–æ —Å–∫–æ–≤–∞–ª –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å ‚ö°", "—É–≤–µ—Ä–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–æ—è—Å ‚ö°"],
        "–°–°": ["–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –ø—Ä–æ–≤–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ ‚ö°", "—Ç–æ—á–Ω–æ –Ω–∞—Ü–µ–ª–∏–ª—Å—è –≤ —Ü–µ–Ω—Ç—Ä —Ç–µ–ª–∞ ‚ö°", "–±—ã—Å—Ç—Ä–æ —Å–∂–∞–ª —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ ‚ö°", "—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏–ª —Å–µ—Ä–µ–¥–∏–Ω—É ‚ö°", "—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–ª –¥—ã—Ö–∞–Ω–∏–µ ‚ö°"],
        "–¢–†": ["–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –ø—Ä–æ–≤–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Ç—Ä–∞—Ö–µ—é ‚ö°", "—Ä–µ–∑–∫–æ —Å–∂–∞–ª —à–µ—é ‚ö°", "—Ç–æ—á–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –≥–æ—Ä–ª–æ ‚ö°", "–±—ã—Å—Ç—Ä–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –¥—ã—Ö–∞–Ω–∏–µ ‚ö°", "—É–≤–µ—Ä–µ–Ω–Ω–æ —Å–∫–æ–≤–∞–ª —Ç—Ä–∞—Ö–µ—é ‚ö°"],
        "–î–ó": ["–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –ø—Ä–æ–≤–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –≥–æ–ª–æ–≤—É ‚ö°", "—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏–ª –≥–æ–ª–æ–≤—É ‚ö°", "—Ç–æ—á–Ω–æ —Å–∂–∞–ª –≤–∏—Å–∫–∏ ‚ö°", "–±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª —á–µ—Ä–µ–ø ‚ö°", "—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –ª–∏—Ü–æ ‚ö°"]
    },
    "control_fail": {
        "–ì–î–ù": ["–Ω–µ—É–∫–ª—é–∂–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∏–∂–µ –ø–æ—è—Å–∞", "–Ω–µ–ª–æ–≤–∫–æ –ø–æ—Ç—è–Ω—É–ª—Å—è –∫ –Ω–æ–≥–∞–º", "–º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–Ω—É–ª—Å—è –∫ –ø–æ—è—Å—É", "—Å–±–∏–≤—á–∏–≤–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –Ω–∏–∑", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏"],
        "–°–°": ["–Ω–µ—É–∫–ª—é–∂–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ", "–Ω–µ–ª–æ–≤–∫–æ —Ç–∫–Ω—É–ª –≤ —Ü–µ–Ω—Ç—Ä", "–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Ç—è–Ω—É–ª—Å—è –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ", "—Å–±–∏–≤—á–∏–≤–æ –º–∞—Ö–Ω—É–ª –≤ –∂–∏–≤–æ—Ç", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ –≥—Ä—É–¥–∏"],
        "–¢–†": ["–Ω–µ—É–∫–ª—é–∂–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Ç—Ä–∞—Ö–µ—é", "–Ω–µ–ª–æ–≤–∫–æ –ø–æ—Ç—è–Ω—É–ª—Å—è –∫ —à–µ–µ", "–º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–Ω—É–ª—Å—è –∫ –≥–æ—Ä–ª—É", "—Å–±–∏–≤—á–∏–≤–æ —Ç–∫–Ω—É–ª –≤ —Ç—Ä–∞—Ö–µ—é", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ —à–µ–µ"],
        "–î–ó": ["–Ω–µ—É–∫–ª—é–∂–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –≥–æ–ª–æ–≤—É", "–Ω–µ–ª–æ–≤–∫–æ –ø–æ—Ç—è–Ω—É–ª—Å—è –∫ –ª–∏—Ü—É", "–º–µ–¥–ª–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª –ø–æ –≥–æ–ª–æ–≤–µ", "—Å–±–∏–≤—á–∏–≤–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ —á–µ—Ä–µ–ø—É", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ —Ç–∫–Ω—É–ª –≤ –≤–∏—Å–æ–∫"]
    },
    "attack_success": {
        "–ì–î–ù": ["–∏ –Ω–µ –æ—Å–æ–±–æ –º–µ—à–∫–∞—è –∞—Ç–∞–∫—É –Ω–∏–∂–µ –ø–æ—è—Å–∞ üí•", "–∏ —Ä–µ–∑–∫–æ —É–¥–∞—Ä–∏–ª –ø–æ–¥ –ø–æ—è—Å üí•", "–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–∑–∞–ª –≤ –Ω–æ–≥–∏ üí•", "–∏ –º–æ—â–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª –Ω–∏–∑ üí•", "–∏ —Ç–æ—á–Ω–æ –ø—Ä–æ–±–∏–ª –Ω–∏–∂–µ –ø–æ—è—Å–∞ üí•"],
        "–°–°": ["–∏ –Ω–µ –æ—Å–æ–±–æ –º–µ—à–∫–∞—è –∞—Ç–∞–∫—É –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ üí•", "–∏ –º–æ—â–Ω–æ –≤—Ä–µ–∑–∞–ª –≤ —Ü–µ–Ω—Ç—Ä üí•", "–∏ —Ä–µ–∑–∫–æ —É–¥–∞—Ä–∏–ª –≤ –∂–∏–≤–æ—Ç üí•", "–∏ —Ç–æ—á–Ω–æ –ø—Ä–æ–±–∏–ª –≥—Ä—É–¥—å üí•", "–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª —Å–µ—Ä–µ–¥–∏–Ω—É üí•"],
        "–¢–†": ["–∏ –Ω–µ –æ—Å–æ–±–æ –º–µ—à–∫–∞—è –∞—Ç–∞–∫—É –≤ —Ç—Ä–∞—Ö–µ—é üí•", "–∏ —Ä–µ–∑–∫–æ —Å–∂–∞–ª –≥–æ—Ä–ª–æ üí•", "–∏ –º–æ—â–Ω–æ —É–¥–∞—Ä–∏–ª –≤ —à–µ—é üí•", "–∏ —Ç–æ—á–Ω–æ –≤—Ä–µ–∑–∞–ª –≤ —Ç—Ä–∞—Ö–µ—é üí•", "–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª –≥–æ—Ä—Ç–∞–Ω—å üí•"],
        "–î–ó": ["–∏ –Ω–µ –æ—Å–æ–±–æ –º–µ—à–∫–∞—è –∞—Ç–∞–∫—É –≤ –≥–æ–ª–æ–≤—É üí•", "–∏ –º–æ—â–Ω–æ —É–¥–∞—Ä–∏–ª –≤ –ª–∏—Ü–æ üí•", "–∏ —Ä–µ–∑–∫–æ –≤—Ä–µ–∑–∞–ª –≤ —á–µ—Ä–µ–ø üí•", "–∏ —Ç–æ—á–Ω–æ –ø—Ä–æ–±–∏–ª –≤–∏—Å–æ–∫ üí•", "–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª –≥–æ–ª–æ–≤—É üí•"]
    },
    "attack_fail": {
        "–ì–î–ù": ["–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω—ë—Å –∞—Ç–∞–∫—É –Ω–∏–∂–µ –ø–æ—è—Å–∞", "–∏ –≤—è–ª–æ —Ç–∫–Ω—É–ª –ø–æ–¥ –ø–æ—è—Å", "–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª –ø–æ –Ω–æ–≥–∞–º", "–∏ —Å–ª–∞–±–æ —É–¥–∞—Ä–∏–ª –≤ –Ω–∏–∑", "–∏ –Ω–µ–ª–æ–≤–∫–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ –ø–æ—è—Å—É"],
        "–°–°": ["–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω—ë—Å –∞—Ç–∞–∫—É –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ", "–∏ –≤—è–ª–æ —Ç–∫–Ω—É–ª –≤ –∂–∏–≤–æ—Ç", "–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª –ø–æ —Ü–µ–Ω—Ç—Ä—É", "–∏ —Å–ª–∞–±–æ —É–¥–∞—Ä–∏–ª –≤ –≥—Ä—É–¥—å", "–∏ –Ω–µ–ª–æ–≤–∫–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ"],
        "–¢–†": ["–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω—ë—Å –∞—Ç–∞–∫—É –≤ —Ç—Ä–∞—Ö–µ—é", "–∏ –≤—è–ª–æ —Ç–∫–Ω—É–ª –≤ —à–µ—é", "–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª –ø–æ –≥–æ—Ä–ª—É", "–∏ —Å–ª–∞–±–æ —É–¥–∞—Ä–∏–ª –≤ —Ç—Ä–∞—Ö–µ—é", "–∏ –Ω–µ–ª–æ–≤–∫–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ –≥–æ—Ä—Ç–∞–Ω–∏"],
        "–î–ó": ["–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω—ë—Å –∞—Ç–∞–∫—É –≤ –≥–æ–ª–æ–≤—É", "–∏ –≤—è–ª–æ —Ç–∫–Ω—É–ª –≤ –ª–∏—Ü–æ", "–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª –ø–æ –≥–æ–ª–æ–≤–µ", "–∏ —Å–ª–∞–±–æ —É–¥–∞—Ä–∏–ª –≤ –≤–∏—Å–æ–∫", "–∏ –Ω–µ–ª–æ–≤–∫–æ –¥–µ—Ä–Ω—É–ª—Å—è –∫ —á–µ—Ä–µ–ø—É"]
    }
}

DEFENSE_PHRASES = {
    "defense_success": {
        "–ì–î–ù": ["**–í—ã** –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –ø–æ—è—Å–∞ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω–æ üõ°Ô∏è", "**–í—ã** —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –Ω–∏–∑ üõ°Ô∏è", "**–í—ã** —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏ –ø–æ—è—Å üõ°Ô∏è", "**–í—ã** —É–≤–µ—Ä–µ–Ω–Ω–æ –≤—Å—Ç–∞–ª–∏ –≤ –∑–∞—â–∏—Ç—É –Ω–æ–≥ üõ°Ô∏è", "**–í—ã** –±—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã–ª–∏ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å üõ°Ô∏è"],
        "–°–°": ["**–í—ã** –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω–æ üõ°Ô∏è", "**–í—ã** –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ —Ü–µ–Ω—Ç—Ä üõ°Ô∏è", "**–í—ã** —Ç–æ—á–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –∂–∏–≤–æ—Ç üõ°Ô∏è", "**–í—ã** —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏ –≥—Ä—É–¥—å üõ°Ô∏è", "**–í—ã** —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω—É üõ°Ô∏è"],
        "–¢–†": ["**–í—ã** –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è —Ç—Ä–∞—Ö–µ—é —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω–æ üõ°Ô∏è", "**–í—ã** –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ —à–µ—é üõ°Ô∏è", "**–í—ã** —Ç–æ—á–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≥–æ—Ä–ª–æ üõ°Ô∏è", "**–í—ã** —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏ —Ç—Ä–∞—Ö–µ—é üõ°Ô∏è", "**–í—ã** —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≥–æ—Ä—Ç–∞–Ω—å üõ°Ô∏è"],
        "–î–ó": ["**–í—ã** –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è –≥–æ–ª–æ–≤—É —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω–æ üõ°Ô∏è", "**–í—ã** –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ –ª–∏—Ü–æ üõ°Ô∏è", "**–í—ã** —Ç–æ—á–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≥–æ–ª–æ–≤—É üõ°Ô∏è", "**–í—ã** —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏ —á–µ—Ä–µ–ø üõ°Ô∏è", "**–í—ã** —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤–∏—Å–æ–∫ üõ°Ô∏è"]
    },
    "defense_fail": {
        "–ì–î–ù": ["**–í—ã** –∑–∞–º–µ—à–∫–∞–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –ø–æ—è—Å–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å", "**–í—ã** –Ω–µ–ª–æ–≤–∫–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ –Ω–∏–∑ –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å", "**–í—ã** –º–µ–¥–ª–µ–Ω–Ω–æ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –ø–æ—è—Å", "**–í—ã** –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –Ω–æ–≥–∏", "**–í—ã** —Å–±–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –Ω–∏–∑"],
        "–°–°": ["**–í—ã** –∑–∞–º–µ—à–∫–∞–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å", "**–í—ã** –Ω–µ–ª–æ–≤–∫–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ —Ü–µ–Ω—Ç—Ä –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å", "**–í—ã** –º–µ–¥–ª–µ–Ω–Ω–æ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –∂–∏–≤–æ—Ç", "**–í—ã** –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≥—Ä—É–¥—å", "**–í—ã** —Å–±–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–µ—Ä–µ–¥–∏–Ω—É"],
        "–¢–†": ["**–í—ã** –∑–∞–º–µ—à–∫–∞–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è —Ç—Ä–∞—Ö–µ—é –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å", "**–í—ã** –Ω–µ–ª–æ–≤–∫–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ —à–µ—é –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å", "**–í—ã** –º–µ–¥–ª–µ–Ω–Ω–æ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –≥–æ—Ä–ª–æ", "**–í—ã** –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ —Ç—Ä–∞—Ö–µ—é", "**–í—ã** —Å–±–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —à–µ—é"],
        "–î–ó": ["**–í—ã** –∑–∞–º–µ—à–∫–∞–ª–∏—Å—å, –∑–∞–∫—Ä—ã–≤–∞—è –≥–æ–ª–æ–≤—É –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å", "**–í—ã** –Ω–µ–ª–æ–≤–∫–æ –ø—Ä–∏–∫—Ä—ã–ª–∏ –ª–∏—Ü–æ –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å", "**–í—ã** –º–µ–¥–ª–µ–Ω–Ω–æ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –≥–æ–ª–æ–≤—É", "**–í—ã** –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ —á–µ—Ä–µ–ø", "**–í—ã** —Å–±–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –≤–∏—Å–æ–∫"]
    },
    "counter_success": {
        "–ê–≥–µ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –º–æ—â–Ω—ã–º –ê–≥–µ —É–∫–µ —Å–ª–æ–º–∞–ª–∏ –∞—Ç–∞–∫—É—é—â–µ–º—É —Ä—É–∫—É üí•", "—Ä–µ–∑–∫–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤ –≤–∏—Å–æ–∫ –ê–≥–µ —É–∫–µ, –≤—ã–±–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–∑ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è üí•", "—Ç–æ—á–Ω–æ —É–¥–∞—Ä–∏–ª–∏ –≤ –≥–æ–ª–æ–≤—É –ê–≥–µ —É–∫–µ, –æ–≥–ª—É—à–∏–≤ –≤—Ä–∞–≥–∞ üí•", "—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ê–≥–µ —É–∫–µ –≤ —á–µ—Ä–µ–ø, —Å–±–∏–≤ —Å –Ω–æ–≥ üí•", "—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–∑–∞–ª–∏ –ê–≥–µ —É–∫–µ –≤ –ª–∏—Ü–æ, —Å–ª–æ–º–∞–≤ –Ω–æ—Å üí•"],
        "–£—á–∏ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –≤ —Ç—Ä–∞—Ö–µ—é, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É —Ç–æ—á–Ω—ã–º –£—á–∏ —É–∫–µ –æ–≥–ª—É—à–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ üí•", "–º–æ—â–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤ —à–µ—é –£—á–∏ —É–∫–µ, –ø–µ—Ä–µ–∫—Ä—ã–≤ –¥—ã—Ö–∞–Ω–∏–µ üí•", "—Ä–µ–∑–∫–æ —É–¥–∞—Ä–∏–ª–∏ –£—á–∏ —É–∫–µ –≤ –≥–æ—Ä–ª–æ, –∑–∞—Å—Ç–∞–≤–∏–≤ –∑–∞–¥–æ—Ö–Ω—É—Ç—å—Å—è üí•", "—Ç–æ—á–Ω–æ –≤—Ä–µ–∑–∞–ª–∏ –£—á–∏ —É–∫–µ –≤ —Ç—Ä–∞—Ö–µ—é, —Å–±–∏–≤ —Ä–∏—Ç–º üí•", "—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –£—á–∏ —É–∫–µ –≤ —à–µ—é, –≤—ã–≤–µ–¥—è –∏–∑ —Å—Ç—Ä–æ—è üí•"],
        "–°–æ—Ç–æ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –≤ —Ç—É–ª–æ–≤–∏—â–µ, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É —Ä–µ–∑–∫–∏–º –°–æ—Ç–æ —É–∫–µ –≤—ã–±–∏–≤ –¥—ã—Ö–∞–Ω–∏–µ üí•", "–º–æ—â–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤ –∂–∏–≤–æ—Ç –°–æ—Ç–æ —É–∫–µ, —Å–æ–≥–Ω—É–≤ –≤—Ä–∞–≥–∞ –ø–æ–ø–æ–ª–∞–º üí•", "—Ç–æ—á–Ω–æ —É–¥–∞—Ä–∏–ª–∏ –°–æ—Ç–æ —É–∫–µ –≤ –≥—Ä—É–¥—å, –≤—ã–±–∏–≤ –≤–æ–∑–¥—É—Ö üí•", "—É–≤–µ—Ä–µ–Ω–Ω–æ –≤—Ä–µ–∑–∞–ª–∏ –°–æ—Ç–æ —É–∫–µ –≤ —Ü–µ–Ω—Ç—Ä, —Å–±–∏–≤ —Å –Ω–æ–≥ üí•", "—Ä–µ–∑–∫–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –°–æ—Ç–æ —É–∫–µ –≤ —Ç–µ–ª–æ, –∑–∞—Å—Ç–∞–≤–∏–≤ –æ—Ç—Å—Ç—É–ø–∏—Ç—å üí•"],
        "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –Ω–∏–∂–µ –ø–æ—è—Å–∞, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–º –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –ø–æ–≤–∞–ª–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ üí•", "–º–æ—â–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤ –Ω–æ–≥–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π, —Å–±–∏–≤ —Å –Ω–æ–≥ üí•", "—Ç–æ—á–Ω–æ —É–¥–∞—Ä–∏–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –ø–æ–¥ –ø–æ—è—Å, –∑–∞—Å—Ç–∞–≤–∏–≤ —É–ø–∞—Å—Ç—å üí•", "—É–≤–µ—Ä–µ–Ω–Ω–æ –≤—Ä–µ–∑–∞–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –≤ –Ω–∏–∑, –≤—ã–≤–µ–¥—è –∏–∑ —Å—Ç—Ä–æ—è üí•", "—Ä–µ–∑–∫–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –≤ –ø–æ—è—Å, –ø–æ–≤–∞–ª–∏–≤ –≤—Ä–∞–≥–∞ üí•"]
    },
    "counter_fail": {
        "–ê–≥–µ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–ª–∞–±—ã–π —É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É —Å–ª–∞–±—ã–º –ê–≥–µ —É–∫–µ –µ–¥–≤–∞ –∑–∞–¥–µ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", "–Ω–µ–ª–æ–≤–∫–æ –º–∞—Ö–Ω—É–ª–∏ –ê–≥–µ —É–∫–µ –ø–æ –≥–æ–ª–æ–≤–µ, –ø—Ä–æ–º–∞—Ö–Ω—É–≤—à–∏—Å—å", "—Å–ª–∞–±–æ —Ç–∫–Ω—É–ª–∏ –ê–≥–µ —É–∫–µ –≤ –≤–∏—Å–æ–∫, –Ω–µ –≤–ø–µ—á–∞—Ç–ª–∏–≤ –≤—Ä–∞–≥–∞", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ê–≥–µ —É–∫–µ –≤ –ª–∏—Ü–æ, —Å–ª–µ–≥–∫–∞ –∑–∞–¥–µ–≤", "–ø–æ—Å–∫–æ–ª—å–∑–Ω—É–ª–∏—Å—å, –ø—ã—Ç–∞—è—Å—å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å –ê–≥–µ —É–∫–µ –≤ –≥–æ–ª–æ–≤—É"],
        "–£—á–∏ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–ª–∞–±—ã–π —É–¥–∞—Ä –≤ —Ç—Ä–∞—Ö–µ—é, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –£—á–∏ —É–∫–µ –Ω–µ –≤–ø–µ—á–∞—Ç–ª–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", "–Ω–µ–ª–æ–≤–∫–æ —Ç–∫–Ω—É–ª–∏ –£—á–∏ —É–∫–µ –≤ —à–µ—é, –ø—Ä–æ–º–∞—Ö–Ω—É–≤—à–∏—Å—å", "—Å–ª–∞–±–æ –º–∞—Ö–Ω—É–ª–∏ –£—á–∏ —É–∫–µ –ø–æ –≥–æ—Ä–ª—É, –µ–¥–≤–∞ –∑–∞–¥–µ–≤", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –£—á–∏ —É–∫–µ –≤ —Ç—Ä–∞—Ö–µ—é, —Å–ª–µ–≥–∫–∞ —Ç–æ–ª–∫–Ω—É–≤", "–ø–æ—Å–∫–æ–ª—å–∑–Ω—É–ª–∏—Å—å, –ø—ã—Ç–∞—è—Å—å —É–¥–∞—Ä–∏—Ç—å –£—á–∏ —É–∫–µ –≤ —à–µ—é"],
        "–°–æ—Ç–æ —É–∫–µ": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–ª–∞–±—ã–π —É–¥–∞—Ä –≤ —Ç—É–ª–æ–≤–∏—â–µ, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É —Å–ª–∞–±—ã–º –°–æ—Ç–æ —É–∫–µ —Å–ª–µ–≥–∫–∞ —Ç–æ–ª–∫–Ω—É–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", "–Ω–µ–ª–æ–≤–∫–æ –º–∞—Ö–Ω—É–ª–∏ –°–æ—Ç–æ —É–∫–µ –ø–æ –≥—Ä—É–¥–∏, –ø—Ä–æ–º–∞—Ö–Ω—É–≤—à–∏—Å—å", "—Å–ª–∞–±–æ —Ç–∫–Ω—É–ª–∏ –°–æ—Ç–æ —É–∫–µ –≤ –∂–∏–≤–æ—Ç, –Ω–µ –≤–ø–µ—á–∞—Ç–ª–∏–≤", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –°–æ—Ç–æ —É–∫–µ –≤ —Ü–µ–Ω—Ç—Ä, –µ–¥–≤–∞ –∑–∞–¥–µ–≤", "–ø–æ—Å–∫–æ–ª—å–∑–Ω—É–ª–∏—Å—å, –ø—ã—Ç–∞—è—Å—å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å –°–æ—Ç–æ —É–∫–µ –≤ —Ç–µ–ª–æ"],
        "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π": ["–Ω–∞–Ω–µ—Å–ª–∏ —Å–ª–∞–±—ã–π —É–¥–∞—Ä –Ω–∏–∂–µ –ø–æ—è—Å–∞, –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –ø–æ–≤–∏—Å–Ω—É–≤ –Ω–∞ –∞—Ç–∞–∫—É—é—â–µ–π —Ä—É–∫–µ –∫–∞–∫ —à–∞—à–ª—ã–∫", "–Ω–µ–ª–æ–≤–∫–æ —Ç–∫–Ω—É–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –≤ –Ω–æ–≥–∏, –ø—Ä–æ–º–∞—Ö–Ω—É–≤—à–∏—Å—å", "—Å–ª–∞–±–æ –º–∞—Ö–Ω—É–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –ø–æ–¥ –ø–æ—è—Å, —Å–ª–µ–≥–∫–∞ –∑–∞–¥–µ–≤", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –≤ –Ω–∏–∑, –µ–¥–≤–∞ —Ç—Ä–æ–Ω—É–≤", "–ø–æ—Å–∫–æ–ª—å–∑–Ω—É–ª–∏—Å—å, –ø—ã—Ç–∞—è—Å—å —É–¥–∞—Ä–∏—Ç—å –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π –≤ –ø–æ—è—Å"]
    }
}

# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def start_keyboard():
    return ReplyKeyboardMarkup([["–ò–≥—Ä–∞"]], resize_keyboard=True)

def menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–£—á–µ–±–Ω—ã–π –±–æ–π", callback_data="training_fight")],
        [InlineKeyboardButton("–ê—Ä–µ–Ω–∞", callback_data="arena")],
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton("–ü–∞–º—è—Ç–∫–∞", callback_data="memo")]
    ])

def training_mode_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ–π –±–æ–π", callback_data="simple_fight")],
        [InlineKeyboardButton("–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è", callback_data="timed_fight")]
    ])

def answer_keyboard(show_hint=False):
    buttons = [
        [InlineKeyboardButton("–ê–≥–µ —É–∫–µ", callback_data="–ê–≥–µ —É–∫–µ")],
        [InlineKeyboardButton("–°–æ—Ç–æ —É–∫–µ", callback_data="–°–æ—Ç–æ —É–∫–µ")],
        [InlineKeyboardButton("–£—á–∏ —É–∫–µ", callback_data="–£—á–∏ —É–∫–µ")],
        [InlineKeyboardButton("–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", callback_data="–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π")]
    ]
    if not show_hint:
        buttons.append([InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")])
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä!", reply_markup=start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞"
async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", 
                                    reply_markup=menu_keyboard())

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
async def update_timer(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    remaining = job.data["remaining"] - 1
    job.data["remaining"] = remaining

    control, attack = job.data["current_move"]
    text = f"–®–∞–≥ {job.data['step']} –∏–∑ {len(MOVES)}\n–ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n–ê—Ç–∞–∫–∞: {attack}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
    
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=answer_keyboard(show_hint=True)  # –ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ "–ë–æ–µ –Ω–∞ –≤—Ä–µ–º—è"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")

    if remaining <= 0:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            )
            if job in context.job_queue.jobs():
                job.schedule_removal()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äô–æ–≤
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    if query.data == "rules":
        await query.edit_message_text("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
    elif query.data == "memo":
        await query.edit_message_text("–ü–∞–º—è—Ç–∫–∞: –°–° - —Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ, –¢–† - —Ç—Ä–∞—Ö–µ—è, –î–ó - –≥–æ–ª–æ–≤–∞, –ì–î–ù - –Ω–∏–∂–µ –ø–æ—è—Å–∞.")
    elif query.data == "arena":
        await query.edit_message_text("–ê—Ä–µ–Ω–∞: –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif query.data == "training_fight":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:", reply_markup=training_mode_keyboard())
    elif query.data in ["simple_fight", "timed_fight"]:
        fight_sequence = MOVES.copy()
        random.shuffle(fight_sequence)
        context.user_data["fight_sequence"] = fight_sequence
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["fight_log"] = []

        control, attack = fight_sequence[0]
        text = f"–®–∞–≥ 1 –∏–∑ {len(MOVES)}\n–ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n–ê—Ç–∞–∫–∞: {attack}"
        if query.data == "timed_fight":
            text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
            context.job_queue.run_repeating(
                update_timer,
                interval=1,
                first=0,
                data={
                    "chat_id": query.message.chat_id,
                    "message_id": query.message.message_id,
                    "remaining": 5,
                    "current_move": (control, attack),
                    "step": 1
                }
            )
        await query.edit_message_text(text, reply_markup=answer_keyboard(show_hint=(query.data == "timed_fight")))
    elif query.data == "hint" and context.user_data.get("mode") == "simple_fight":
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        if sequence and step is not None:
            control, attack = sequence[step]
            correct_answer = next((move for move, data in DEFENSE_MOVES.items() if control == data["defense"] and attack in data["counter"]), None)
            await query.edit_message_text(
                f"–®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}\n–ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n–ê—Ç–∞–∫–∞: {attack}\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {correct_answer}",
                reply_markup=answer_keyboard(show_hint=True)
            )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"]:
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        
        if sequence and step is not None:
            current_move = sequence[step]
            control, attack = current_move
            chosen_defense = query.data
            defense_data = DEFENSE_MOVES.get(chosen_defense, {})
            is_success = control == defense_data.get("defense") and attack in defense_data.get("counter", [])
            control_success = control == defense_data.get("defense")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            correct_answer = next((move for move, data in DEFENSE_MOVES.items() if control == data["defense"] and attack in data["counter"]), None)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
            short_log = f"–ê—Ç–∞–∫–∞ {step + 1}\n–ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n–ê—Ç–∞–∫–∞: {attack}\n–ó–∞—â–∏—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {chosen_defense}\n" \
                        f"**{'–£–°–ü–ï–•' if is_success else '–ü–û–†–ê–ñ–ï–ù–ò–ï'}**" + (f" (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answer})" if not is_success and correct_answer else "")
            await query.message.reply_text(short_log, parse_mode="Markdown")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –ª–æ–≥
            attacker_control_success = random.choice([True, False])
            attacker_attack_success = random.choice([True, False])
            counter_zone = random.choice(defense_data.get("counter", ["–î–ó"])) if is_success else random.choice(["–ì–î–ù", "–°–°", "–¢–†", "–î–ó"])
            
            attacker_name = "**–û–ü–®–ö–ê –í–∞—Å—è**"
            attack_text = f"{attacker_name} {'—è—Ä–æ—Å—Ç–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª' if attacker_attack_success else '–Ω–µ–¥–æ–ª–≥–æ –¥—É–º–∞—è —Ä–∏–Ω—É–ª—Å—è –≤ –∞—Ç–∞–∫—É'}: " \
                          f"{random.choice(ATTACK_PHRASES['control_success' if attacker_control_success else 'control_fail'][control])} " \
                          f"{random.choice(ATTACK_PHRASES['attack_success' if attacker_attack_success else 'attack_fail'][attack])} ‚öîÔ∏è "
            defense_text = f"{DEFENSE_PHRASES['defense_success' if control_success else 'defense_fail'][control if control_success else random.choice(list(DEFENSE_PHRASES['defense_fail'].keys()))]} " \
                           f"{random.choice(DEFENSE_PHRASES['counter_success' if is_success else 'counter_fail'][chosen_defense])}"
            detailed_log = f"–ê—Ç–∞–∫–∞ {step + 1}\n{attack_text}{defense_text}"
            context.user_data["fight_log"].append(detailed_log)
            
            if is_success:
                context.user_data["correct_count"] += 1
            if control_success:
                context.user_data["control_count"] += 1
            
            step += 1
            context.user_data["current_step"] = step
            
            if step < len(sequence):
                if mode == "timed_fight" and context.job_queue.jobs():
                    for job in context.job_queue.jobs():
                        job.schedule_removal()
                
                control, attack = sequence[step]
                text = f"–®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}\n–ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n–ê—Ç–∞–∫–∞: {attack}"
                if mode == "timed_fight":
                    text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
                    context.job_queue.run_repeating(
                        update_timer,
                        interval=1,
                        first=0,
                        data={
                            "chat_id": query.message.chat_id,
                            "message_id": query.message.message_id,
                            "remaining": 5,
                            "current_move": (control, attack),
                            "step": step + 1
                        }
                    )
                await query.edit_message_text(text, reply_markup=answer_keyboard(show_hint=(mode == "timed_fight")))
            else:
                if mode == "timed_fight" and context.job_queue.jobs():
                    for job in context.job_queue.jobs():
                        job.schedule_removal()
                
                correct_count = context.user_data["correct_count"]
                control_count = context.user_data["control_count"]
                hint_count = context.user_data.get("hint_count", 0)
                total = len(MOVES)
                full_log = "–õ–û–ì –ë–û–Ø\n" + "\n\n".join(context.user_data["fight_log"]) + \
                           f"\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct_count}, —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π: {hint_count}, –∏–∑ {total}\n" \
                           f"–û—Ç–±–∏—Ç–æ {control_count} –∏–∑ {total} –∫–æ–Ω—Ç—Ä–æ–ª–µ–π\n–ü—Ä–æ–ø—É—â–µ–Ω–æ {total - correct_count} –∞—Ç–∞–∫"
                await query.message.reply_text(full_log)
                await query.edit_message_text("–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not hostname:
        logger.error("RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    port = int(os.environ.get("PORT", 10000))
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç: {port}")

    request = HTTPXRequest(read_timeout=60, connect_timeout=60)
    app = Application.builder().token(token).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Text(["–ò–≥—Ä–∞"]), game))
    app.add_handler(CallbackQueryHandler(button))

    webhook_url = f"https://{hostname}/{token}"
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")

    await app.initialize()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    await app.start()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=token,
        webhook_url=webhook_url
    )
    logger.info(f"–í–µ–±—Ö—É–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
