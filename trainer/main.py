import os
import logging
import asyncio
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)
from telegram.request import HTTPXRequest
from handlers import start, game, button, setnick, handle_nick_reply
from database import init_db

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
def get_env_variable(name: str, required: bool = True, default=None):
    value = os.getenv(name, default)
    if required and not value:
        logger.error(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{name}' –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        raise EnvironmentError(f"{name} not set")
    return value

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = get_env_variable("TELEGRAM_TOKEN")
    hostname = get_env_variable("RENDER_EXTERNAL_HOSTNAME")
    port = int(os.getenv("PORT", "10000"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    request = HTTPXRequest(read_timeout=60, connect_timeout=60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(token).request(request).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setnick", setnick))
    app.add_handler(MessageHandler(filters.REPLY & ~filters.COMMAND, handle_nick_reply))
    app.add_handler(MessageHandler(filters.Text(["–ò–≥—Ä–∞"]), game))
    app.add_handler(CallbackQueryHandler(button))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://{hostname}/{token}"
    logger.info(f"üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")

    await app.initialize()
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=token,
        webhook_url=webhook_url
    )

    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∂–∏–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    try:
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
