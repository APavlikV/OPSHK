from telegram.ext import ContextTypes
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from keyboards import menu_keyboard, training_fight_keyboard, training_rules_keyboard, training_memo_keyboard, answer_keyboard, pvp_bot_keyboard, pvp_attack_keyboard, pvp_move_keyboard
from game_logic import generate_fight_sequence, check_move, generate_short_log, generate_detailed_log, generate_final_stats
from data import MOVES, DEFENSE_MOVES
from database import get_nickname, set_nickname
import logging
from telegram.error import BadRequest
import random

logger = logging.getLogger(__name__)

def get_start_keyboard():
    keyboard = [["–ò–≥—Ä–∞"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    if context.user_data is None:
        context.user_data = {}
    
    user_id = update.effective_user.id
    saved_nickname = get_nickname(user_id)
    
    if saved_nickname:
        context.user_data["nickname"] = saved_nickname
        await update.message.reply_text(
            f"<b>ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {saved_nickname}!</b>\n"
            f"–ì–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b>?",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )
    else:
        telegram_username = update.effective_user.username or update.effective_user.first_name
        if telegram_username:
            keyboard = [
                [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram", callback_data="use_telegram_nick")],
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π", callback_data="choose_own_nick")]
            ]
            await update.message.reply_text(
                f"<b>ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!</b>\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à <b>–Ω–∏–∫ Telegram ({telegram_username})</b> –∏–ª–∏ <b>–≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π?</b>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                "<b>ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!</b>\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
                parse_mode="HTML",
                reply_markup=ForceReply(selective=True)
            )

async def setnick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setnick")
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫:",
        reply_markup=ForceReply(selective=True)
    )

async def handle_nick_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return
    nick = update.message.text.strip()
    user_id = update.effective_user.id
    if len(nick) > 20:
        await update.message.reply_text(
            "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_start_keyboard()
        )
    elif nick:
        context.user_data["nickname"] = nick
        set_nickname(user_id, nick)
        await update.message.reply_text(
            f"–ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{nick}</b>\n"
            "–ì–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b>?",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )
    else:
        nick = "–í—ã"
        context.user_data["nickname"] = nick
        set_nickname(user_id, nick)
        await update.message.reply_text(
            "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º <b>–í—ã</b>.\n"
            "–ì–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b>?",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    if context.user_data is None:
        context.user_data = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=menu_keyboard()
    )

async def update_timer(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    if not job.data.get("active", True):
        return
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    remaining = job.data["remaining"] - 1
    job.data["remaining"] = remaining
    try:
        control, attack = job.data["current_move"]
        step = job.data["step"]
        text = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</u>\n\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
        )
        if remaining > 0:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=message_id, text=text, reply_markup=answer_keyboard(), parse_mode="HTML"
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    job.data["active"] = False
                    return
                raise
        else:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=message_id, text="–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML"
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                else:
                    raise
            job.data["timer_ended"] = True
            job.data["active"] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_timer: {e}", exc_info=True)
        job.data["active"] = False
    finally:
        if not job.data.get("active", True):
            try:
                job.schedule_removal()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ update_timer: {e}")

async def show_next_move(context, chat_id, mode, sequence, step):
    control, attack = sequence[step]
    if mode == "timed_fight":
        text = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</u>\n\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
        )
    else:  # simple_fight
        text = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</u>\n\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>"
        )
    reply_markup = answer_keyboard(send_hint=(mode == "simple_fight"))
    msg = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="HTML")
    context.user_data["last_message_id"] = msg.message_id
    if mode == "timed_fight":
        job = context.job_queue.run_repeating(
            update_timer, interval=1, first=0,
            data={
                "chat_id": chat_id,
                "message_id": msg.message_id,
                "remaining": 5,
                "current_move": (control, attack),
                "step": step,
                "timer_ended": False,
                "active": True
            }
        )
        context.user_data["current_timer"] = job
    return msg

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    if context.user_data is None:
        context.user_data = {}

    if query.data == "use_telegram_nick":
        telegram_username = update.effective_user.username or update.effective_user.first_name
        user_id = update.effective_user.id
        context.user_data["nickname"] = telegram_username
        set_nickname(user_id, telegram_username)
        await query.message.reply_text(
            f"–ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{telegram_username}</b>\n"
            "–ì–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b>?",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    elif query.data == "choose_own_nick":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
            reply_markup=ForceReply(selective=True)
        )
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    elif query.data == "training_fight":
        await query.edit_message_text(
            "ü•ä –£—á–µ–±–Ω—ã–π –±–æ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=training_fight_keyboard(),
            parse_mode="HTML"
        )
    elif query.data == "training_rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –ò–ì–†–´</b>\n"
            "‚ûñ\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä! –ó–¥–µ—Å—å –≤—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º <b>ü•∏ Bot –í–∞—Å–µ–π</b>. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—â–∏—â–∞—Ç—å—Å—è –æ—Ç –µ–≥–æ –∞—Ç–∞–∫ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å.\n\n"
            "<b>–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –ø–æ–µ–¥–∏–Ω–æ–∫:</b>\n"
            "1. <i>–®–∞–≥ –±–æ—è:</i> –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ üéØ <b>–ö–æ–Ω—Ç—Ä–æ–ª—è</b> (–ø–æ —Å—É—Ç–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —É–¥–∞—Ä –∏–ª–∏ –∑–∞—Ö–≤–∞—Ç) –∏ üí• <b>–ê—Ç–∞–∫–∏</b> (–∫—É–¥–∞ –Ω–∞–Ω–µ—Å—ë—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —É–¥–∞—Ä).\n"
            "2. <i>–í–∞—à —Ö–æ–¥:</i> –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ –∑–∞—â–∏—Ç—ã: üõ°Ô∏è <b>–ê–≥–µ —É–∫–µ</b>, <b>–£—á–∏ —É–∫–µ</b>, <b>–°–æ—Ç–æ —É–∫–µ</b> –∏–ª–∏ <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>.\n"
            "3. <i>–†–µ–∑—É–ª—å—Ç–∞—Ç:</i>\n"
            "   - ‚úÖ <b>–£–°–ü–ï–•:</b> –µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∞—Ç–∞–∫—É.\n"
            "   - ‚ö†Ô∏è <b>–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•:</b> –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ –æ—Ç–±–∏—Ç, –Ω–æ –∞—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.\n"
            "   - ‚ùå <b>–ü–û–†–ê–ñ–ï–ù–ò–ï:</b> –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–ª–∏ –∞—Ç–∞–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏.\n"
            "4. <i>–õ–æ–≥ –±–æ—è:</i> –ü–æ—Å–ª–µ —Ö–æ–¥–∞ ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°—Ö–≤–∞—Ç–∫–∏.\n\n"
            "<b>–†–µ–∂–∏–º—ã:</b>\n"
            "- <i>–ü—Ä–æ—Å—Ç–æ–π –±–æ–π:</i> –ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞, —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.\n"
            "- <i>–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è:</i> 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.\n\n"
            "<b>–¶–µ–ª—å:</b>\n"
            "–ü—Ä–æ–π—Ç–∏ 9 —à–∞–≥–æ–≤, –Ω–∞–±—Ä–∞–≤ –º–∞–∫—Å–∏–º—É–º –ø–æ–±–µ–¥ –≤ –°—Ö–≤–∞—Ç–∫–∞—Ö.",
            parse_mode="HTML",
            reply_markup=training_rules_keyboard()
        )
    elif query.data == "training_memo":
        await query.edit_message_text(
            "<b>üß† –ü–ê–ú–Ø–¢–ö–ê</b>\n"
            "‚ûñ\n"
            "üëäüèª <i>–ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞—Ç–∞–∫–∏:</i>\n"
            "‚Ä¢ <b>–°–°</b> ‚Äî –ß—É–¥–∞–Ω (—Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ)\n"
            "‚Ä¢ <b>–¢–†</b> ‚Äî –ß—É–¥–∞–Ω (—Ç—Ä–∞—Ö–µ—è)\n"
            "‚Ä¢ <b>–î–ó</b> ‚Äî –î–∑–µ–¥–∞–Ω (–≥–æ–ª–æ–≤–∞)\n"
            "‚Ä¢ <b>–ì–î–ù</b> ‚Äî –ì–æ–¥–∞–Ω (–Ω–∏–∂–µ –ø–æ—è—Å–∞)\n\n"
            "üõ°Ô∏è <i>–¢–∏–ø—ã –∑–∞—â–∏—Ç—ã:</i>\n"
            "‚ñ´Ô∏è <b>–ê–≥–µ —É–∫–µ</b>\n"
            "   ‚Ä¢ <i>–ó–∞—â–∏—Ç–∞:</i> <b>–°–°</b>\n"
            "   ‚Ä¢ <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> <b>–î–ó</b> / <b>–¢–†</b>\n"
            "   ‚Ä¢ <i>–î–æ–±–∏–≤–∞–Ω–∏–µ:</i> <b>–î–ó</b>\n"
            "‚ñ´Ô∏è <b>–£—á–∏ —É–∫–µ</b>\n"
            "   ‚Ä¢ <i>–ó–∞—â–∏—Ç–∞:</i> <b>–°–°</b>\n"
            "   ‚Ä¢ <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> <b>–î–ó</b> / <b>–¢–†</b>\n"
            "   ‚Ä¢ <i>–î–æ–±–∏–≤–∞–Ω–∏–µ:</i> <b>–î–ó</b> / <b>–¢–†</b> / <b>–°–°</b>\n"
            "‚ñ´Ô∏è <b>–°–æ—Ç–æ —É–∫–µ</b>\n"
            "   ‚Ä¢ <i>–ó–∞—â–∏—Ç–∞:</i> <b>–¢–†</b>\n"
            "   ‚Ä¢ <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> <b>–î–ó</b> / <b>–°–°</b>\n"
            "   ‚Ä¢ <i>–î–æ–±–∏–≤–∞–Ω–∏–µ:</i> <b>–î–ó</b> / <b>–¢–†</b> / <b>–°–°</b>\n"
            "‚ñ´Ô∏è <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>\n"
            "   ‚Ä¢ <i>–ó–∞—â–∏—Ç–∞:</i> <b>–î–ó</b>\n"
            "   ‚Ä¢ <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> <b>–¢–†</b> / <b>–°–°</b>\n"
            "   ‚Ä¢ <i>–î–æ–±–∏–≤–∞–Ω–∏–µ:</i> <b>–¢–†</b> / <b>–°–°</b> / <b>–ì–î–ù</b>",
            parse_mode="HTML",
            reply_markup=training_memo_keyboard()
        )
    elif query.data in ["simple_fight", "timed_fight"]:
        context.user_data["fight_sequence"] = generate_fight_sequence()
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["timer_ended"] = False
        await show_next_move(context, query.message.chat_id, query.data, context.user_data["fight_sequence"], 0)
        await query.delete_message()
    elif query.data == "hint":
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")
        if mode == "simple_fight" and sequence and step is not None and query.message.message_id == current_message_id:
            control, attack = sequence[step]
            is_success, partial_success, correct_answer = check_move(control, attack, "–ê–≥–µ —É–∫–µ")
            text = (
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</u>\n\n"
                f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
                f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n\n"
                f"üí° <i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</i> üõ° <b>{correct_answer}</b>"
            )
            await query.edit_message_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
            context.user_data["hint_count"] = context.user_data.get("hint_count", 0) + 1
    elif query.data == "pvp_bot":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º PvP: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é")
        if "current_timer" in context.user_data:
            job = context.user_data["current_timer"]
            if job and job.data.get("active", False):
                job.data["active"] = False
                try:
                    job.schedule_removal()
                    logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ PvP")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            del context.user_data["current_timer"]
        try:
            await query.edit_message_text(
                "ü•ä –ë–æ–π —Å –±–æ—Ç–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=pvp_bot_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ pvp_bot: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
    elif query.data == "pvp_rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–û–ï–î–ò–ù–ö–ê</b>\n"
            "‚ûñ\n"
            "–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b> –Ω–∞ —Å—á—ë—Ç.\n\n"
            "<b>–°—Ö–≤–∞—Ç–∫–∞:</b>\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ —É—Ä–æ–≤–Ω–∏ üéØ <b>–ö–æ–Ω—Ç—Ä–æ–ª—è</b> –∏ üí• <b>–ê—Ç–∞–∫–∏</b> (<b>–°–°</b>, <b>–¢–†</b>, <b>–î–ó</b>).\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ üõ°Ô∏è <b>–ó–∞—â–∏—Ç—É</b> (<b>–ê–≥–µ —É–∫–µ</b>, <b>–°–æ—Ç–æ —É–∫–µ</b>, <b>–£—á–∏ —É–∫–µ</b>, <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>).\n\n"
            "<b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:</b>\n"
            "<b>–¢–æ—Ä–∏:</b>\n"
            "- üéØ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å:</b> +1 (–µ—Å–ª–∏ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ ‚úÖ).\n"
            "- üí• <b>–ê—Ç–∞–∫–∞:</b> +2 (–µ—Å–ª–∏ –ê—Ç–∞–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ö–æ–Ω—Ç—Ä–æ–ª–µ ‚úÖ) –∏–ª–∏ +1 (–µ—Å–ª–∏ –ê—Ç–∞–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏, –Ω–æ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –ö–æ–Ω—Ç—Ä–æ–ª–µ ‚ùå).\n"
            "<b>–£–∫–µ:</b>\n"
            "- ‚û°Ô∏è <b>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</b> +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è —É–¥–∞–ª–∞—Å—å ‚úÖ).\n"
            "- üî• <b>–î–æ–±–∏–≤–∞–Ω–∏–µ:</b> +2 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ö–æ–Ω—Ç—Ä–æ–ª—è –∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ —É—Å–ø–µ—à–Ω—ã ‚úÖ).\n"
            "- üõë <b>–ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏:</b> +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ö–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ —É–¥–∞–ª–∞—Å—å ‚ùå, –Ω–æ –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ —É—Å–ø–µ—à–Ω–∞ ‚úÖ).\n\n"
            "<b>üèÜ –ü–æ–±–µ–¥–∞:</b>\n"
            "- –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–µ–º, –∫—Ç–æ –∑–∞ 5 —Å—Ö–≤–∞—Ç–æ–∫ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_start")]])
        )
    elif query.data == "pvp_start":
        logger.info("–ù–∞—á–∞–ª–æ PvP –±–æ—è")
        context.user_data["pvp_mode"] = "sport"
        context.user_data["player_score"] = 0
        context.user_data["bot_score"] = 0
        context.user_data["step"] = 0
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None
        context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        await query.edit_message_text(
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ 1</u>\n\nüéØ <i>–ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</i>\n<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è</b>",
            reply_markup=pvp_attack_keyboard("control"),
            parse_mode="HTML"
        )
    elif query.data.startswith("attack_control_"):
        control = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å: {control}")
        context.user_data["player_control"] = control
        step = context.user_data["step"] + 1
        try:
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}</u>\n\nüí• <i>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</i>\n<b>2. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫–∏</b>",
                reply_markup=pvp_attack_keyboard("attack"),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
    elif query.data.startswith("attack_hit_"):
        attack = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫–∞: {attack}")
        context.user_data["player_attack"] = attack
        step = context.user_data["step"] + 1
        try:
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}</u>\n\n"
                f"–í–∞—à–∞ –∞—Ç–∞–∫–∞: <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>, <i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
                f"<b>üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:</b>",
                reply_markup=answer_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"] and "pvp_mode" in context.user_data:
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞—â–∏—Ç–∞: {query.data}")
        context.user_data["player_defense"] = query.data
        try:
            await query.edit_message_text(
                f"–í–∞—à —Ö–æ–¥\n"
                f"üëäüèª<i>–ê—Ç–∞–∫–∞:</i>\n"
                f"<i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>,\n"
                f"<i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
                f"<i>–ó–∞—â–∏—Ç–∞:</i> <b>{context.user_data['player_defense']}</b>\n"
                f"<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:</i>",
                reply_markup=pvp_move_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞—â–∏—Ç—ã: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
    elif query.data == "pvp_move":
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ PvP")
        player_control = context.user_data.get("player_control")
        player_attack = context.user_data.get("player_attack")
        player_defense = context.user_data.get("player_defense")
        bot_control = context.user_data.get("bot_control")
        bot_attack = context.user_data.get("bot_attack")
        if not all([player_control, player_attack, player_defense, bot_control, bot_attack]):
            logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–¥–∞: control={player_control}, attack={player_attack}, defense={player_defense}, bot_control={bot_control}, bot_attack={bot_attack}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
            return

        bot_defense = random.choice(["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"])
        player_name = context.user_data.get("nickname", "–í—ã")

        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        player_control_success = DEFENSE_MOVES[bot_defense]["control"] != player_control
        player_attack_success = player_attack not in DEFENSE_MOVES[bot_defense]["attack_defense"]
        bot_control_defense_success = not player_control_success
        bot_counter_success = bot_control_defense_success
        bot_attack_defense_success = player_attack not in DEFENSE_MOVES[bot_defense]["attack_defense"]
        bot_dobivanie = player_control_success and bot_attack_defense_success
        bot_attack_defense = not player_control_success and bot_attack_defense_success

        if player_control_success:
            context.user_data["player_score"] += 1
        if player_attack_success:
            context.user_data["player_score"] += (2 if player_control_success else 1)
        if bot_counter_success:
            context.user_data["bot_score"] += 1

        # –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        bot_control_success = DEFENSE_MOVES[player_defense]["control"] != bot_control
        bot_attack_success = bot_attack not in DEFENSE_MOVES[player_defense]["attack_defense"]
        player_control_defense_success = not bot_control_success
        player_counter_success = player_control_defense_success
        player_attack_defense_success = bot_attack not in DEFENSE_MOVES[player_defense]["attack_defense"]
        player_dobivanie = bot_control_success and player_attack_defense_success
        player_attack_defense = not bot_control_success and player_attack_defense_success

        if bot_control_success:
            context.user_data["bot_score"] += 1
        if bot_attack_success:
            context.user_data["bot_score"] += (2 if bot_control_success else 1)
        if player_counter_success:
            context.user_data["player_score"] += 1
        if player_dobivanie:
            context.user_data["player_score"] += 2
        elif player_attack_defense:
            context.user_data["player_score"] += 1

        step = context.user_data["step"] + 1
        context.user_data["step"] = step
        log = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}</u>\n\n"
            f"<u>–¢–æ—Ä–∏</u> <b>{player_name}</b>:\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{player_control}</b> {'‚úÖ' if player_control_success else '‚ùå'} <b>(+{1 if player_control_success else 0})</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞</i> <b>{player_attack}</b> {'‚úÖ' if player_attack_success else '‚ùå'} <b>(+{2 if player_control_success and player_attack_success else 1 if player_attack_success else 0})</b>\n\n"
            f"<u>–£–∫–µ</u> <b>–ë–æ—Ç</b>:\n"
            f"üõ°Ô∏è <i>–ó–∞—â–∏—Ç–∞</i> <b>{bot_defense}</b>\n"
            f"üõë <i>–ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:</i> {'‚úÖ' if bot_control_defense_success else '‚ùå'} <b>(+{1 if bot_control_defense_success else 0})</b>\n"
            f"‚û°Ô∏è <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> {'‚úÖ' if bot_counter_success else '‚ùå'} <b>(+{1 if bot_counter_success else 0})</b>\n"
            f"üî• <i>{'–î–æ–±–∏–≤–∞–Ω–∏–µ' if bot_dobivanie else '–ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏'}:</i> {'‚úÖ' if bot_dobivanie or bot_attack_defense else '‚ùå'} <b>(+{2 if bot_dobivanie else 0})</b>\n\n"
            f"--------\n\n"
            f"<u>–¢–æ—Ä–∏</u> <b>–ë–æ—Ç</b>:\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{bot_control}</b> {'‚úÖ' if bot_control_success else '‚ùå'} <b>(+{1 if bot_control_success else 0})</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞</i> <b>{bot_attack}</b> {'‚úÖ' if bot_attack_success else '‚ùå'} <b>(+{2 if bot_control_success and bot_attack_success else 1 if bot_attack_success else 0})</b>\n\n"
            f"<u>–£–∫–µ</u> <b>{player_name}</b>:\n"
            f"üõ°Ô∏è <i>–ó–∞—â–∏—Ç–∞</i> <b>{player_defense}</b>\n"
            f"üõë <i>–ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:</i> {'‚úÖ' if player_control_defense_success else '‚ùå'} <b>(+{1 if player_control_defense_success else 0})</b>\n"
            f"‚û°Ô∏è <i>–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</i> {'‚úÖ' if player_counter_success else '‚ùå'} <b>(+{1 if player_counter_success else 0})</b>\n"
            f"üî• <i>{'–î–æ–±–∏–≤–∞–Ω–∏–µ' if player_dobivanie else '–ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏'}:</i> {'‚úÖ' if player_dobivanie or player_attack_defense else '‚ùå'} <b>(+{2 if player_dobivanie else 1 if player_attack_defense else 0})</b>\n\n"
            f"ü•ä <i>–°—á—ë—Ç:</i> <b>{player_name}</b> {context.user_data['player_score']} - <b>–ë–æ—Ç</b> {context.user_data['bot_score']}"
        )
        await query.message.reply_text(log, parse_mode="HTML")
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        if step >= 5:
            winner = player_name if context.user_data["player_score"] > context.user_data["bot_score"] else "–ë–æ—Ç" if context.user_data["bot_score"] > context.user_data["player_score"] else "–ù–∏—á—å—è"
            winner_text = f"<b>üèÜ {winner}</b>" if winner != "–ù–∏—á—å—è" else "<b>üèÜ –ù–∏—á—å—è</b>"
            await query.message.reply_text(
                f"<b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
                f"<u>–°–æ —Å—á—ë—Ç–æ–º {context.user_data['player_score']} - {context.user_data['bot_score']} –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É</u>\n\n"
                f"{winner_text}",
                reply_markup=get_start_keyboard(),
                parse_mode="HTML"
            )
            context.user_data.clear()
        else:
            context.user_data["player_control"] = None
            context.user_data["player_attack"] = None
            context.user_data["player_defense"] = None
            context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            await query.message.reply_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</u>\n\nüéØ <i>–ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</i>\n<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è</b>",
                reply_markup=pvp_attack_keyboard("control"),
                parse_mode="HTML"
            )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"]:
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")
        if sequence and step is not None and query.message.message_id == current_message_id:
            if mode == "timed_fight" and "current_timer" in context.user_data:
                job = context.user_data["current_timer"]
                job.data["active"] = False
                try:
                    job.schedule_removal()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
                timer_ended = job.data.get("timer_ended", False)
                del context.user_data["current_timer"]
                if timer_ended:
                    await query.edit_message_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
                    return
            await query.delete_message()
            control, attack = sequence[step]
            chosen_defense = query.data
            is_success, partial_success, correct_answer = check_move(control, attack, chosen_defense)
            short_log = generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer)
            short_msg = await query.message.reply_text(short_log, parse_mode="HTML")
            detailed_log = generate_detailed_log(control, attack, chosen_defense, is_success)
            await query.message.reply_text(detailed_log, parse_mode="HTML", reply_to_message_id=short_msg.message_id)
            if is_success:
                context.user_data["correct_count"] += 1
            if control == DEFENSE_MOVES[chosen_defense]["control"]:
                context.user_data["control_count"] += 1
            if step >= len(sequence) - 1:
                await query.message.reply_text("<b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>", parse_mode="HTML")
                final_stats = generate_final_stats(
                    context.user_data["correct_count"],
                    context.user_data["control_count"],
                    context.user_data.get("hint_count", 0),
                    len(MOVES)
                )
                await query.message.reply_text(final_stats, parse_mode="HTML", reply_markup=get_start_keyboard())
                context.user_data.clear()
            else:
                context.user_data["current_step"] += 1
                await show_next_move(context, query.message.chat_id, mode, sequence, context.user_data["current_step"])
