from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from trainer.data import MOVES, DEFENSE_MOVES
from trainer.game_logic import check_move, generate_detailed_log
from trainer.state import GameState
import random

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NICKNAME = 0

async def start(update: Update, context: CallbackContext):
    state = GameState()
    telegram_nick = update.effective_user.username or update.effective_user.first_name
    context.user_data["state"] = state

    keyboard = [
        [InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {telegram_nick}", callback_data=f"nick_{telegram_nick}")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π", callback_data="nick_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –Ω–∏–∫ Telegram ({telegram_nick}) –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π?",
        reply_markup=reply_markup
    )

async def setnick(update: Update, context: CallbackContext):
    await update.message.reply_text("üí° –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫:")
    return NICKNAME

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    state = context.user_data.get("state", GameState())

    if query.data.startswith("nick_"):
        if query.data == "nick_custom":
            await query.message.reply_text("üí° –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫:")
            return NICKNAME
        else:
            state.nickname = query.data.replace("nick_", "")
            context.user_data["state"] = state
            await context.bot.edit_message_text(
                text=f"‚úÖ –ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {state.nickname}\n–ì–æ—Ç–æ–≤ –∫ –±–æ—é? –ù–∞–ø–∏—à–∏ /game",
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
    elif query.data.startswith("defense_"):
        await simple_fight_defense(update, context)
    
    await query.answer()
    return ConversationHandler.END

async def handle_nick_reply(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    state.nickname = update.message.text.strip()
    context.user_data["state"] = state
    await update.message.reply_text(f"‚úÖ –ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {state.nickname}\n–ì–æ—Ç–æ–≤ –∫ –±–æ—é? –ù–∞–ø–∏—à–∏ /game")
    return ConversationHandler.END

async def handle_first_message(update: Update, context: CallbackContext):
    await start(update, context)

async def game(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    if not state.nickname:
        telegram_nick = update.effective_user.username or update.effective_user.first_name
        state.nickname = telegram_nick
    state.mode = "training"
    context.user_data["state"] = state
    await start_fight(update, context)

async def start_fight(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    state.fight_sequence = random.sample(MOVES, 10)
    state.current_step = 0
    state.correct_count = 0
    state.control_count = 0
    state.missed_attacks = 0
    state.total_points = 0
    context.user_data["state"] = state

    keyboard = [
        [InlineKeyboardButton("–ê–≥–µ —É–∫–µ", callback_data="defense_–ê–≥–µ —É–∫–µ")],
        [InlineKeyboardButton("–°–æ—Ç–æ —É–∫–µ", callback_data="defense_–°–æ—Ç–æ —É–∫–µ")],
        [InlineKeyboardButton("–£—á–∏ —É–∫–µ", callback_data="defense_–£—á–∏ —É–∫–µ")],
        [InlineKeyboardButton("–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", callback_data="defense_–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    control, attack = state.fight_sequence[state.current_step]
    message = await update.message.reply_text(
        f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ 1 –∏–∑ 10</code>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    state.last_fight_message_id = message.message_id
    context.user_data["state"] = state

async def simple_fight_defense(update: Update, context: CallbackContext):
    query = update.callback_query
    state = context.user_data.get("state", GameState())
    chosen_defense = query.data.replace("defense_", "")
    control, attack = state.fight_sequence[state.current_step]
    
    is_success, partial_success, correct_defenses, points = check_move(control, attack, chosen_defense)
    
    if is_success:
        state.correct_count += 1
        state.control_count += 1
    elif control in DEFENSE_MOVES.get(chosen_defense, {}).get("control_defense", []):
        state.control_count += 1
    elif attack in DEFENSE_MOVES.get(chosen_defense, {}).get("attack_defense", []):
        pass
    else:
        state.missed_attacks += 1
    
    state.total_points += points
    
    nickname = state.nickname or "–ë–æ–µ—Ü"
    log = generate_detailed_log(control, attack, chosen_defense, is_success, nickname)
    
    task_text = (
        f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {state.current_step + 1} –∏–∑ 10</code>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>\n"
        f"üõ°Ô∏è <i>–í–∞—à–∞ –∑–∞—â–∏—Ç–∞</i>: <b>{chosen_defense}</b>\n\n"
    )
    result_text = (
        f"‚úÖ <b>–ß–ò–°–¢–ê–Ø –ü–û–ë–ï–î–ê</b> (+{points} –±–∞–ª–ª–æ–≤)"
        if is_success else (
            f"‚úÖ <b>–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•</b> (+{points} –±–∞–ª–ª–æ–≤)"
            if partial_success else
            f"‚ùå <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b> (+{points} –±–∞–ª–ª–æ–≤)"
        )
    )
    hint_text = (
        f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞</b>: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî {', '.join(correct_defenses) if correct_defenses else '–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞—â–∏—Ç—ã'}"
    )
    
    await context.bot.edit_message_text(
        text=task_text + result_text + "\n\n" + hint_text,
        chat_id=query.message.chat_id,
        message_id=state.last_fight_message_id,
        parse_mode="HTML",
        reply_markup=None
    )
    
    await query.message.reply_text(
        log,
        parse_mode="HTML"
    )
    
    state.current_step += 1
    
    if state.current_step >= 10:
        total_text = (
            f"üèÜ <b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
            f"üëä –ß–∏—Å—Ç—ã—Ö –ø–æ–±–µ–¥: <b>{state.correct_count}</b>\n"
            f"üõ°Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–µ–π –æ—Ç–±–∏—Ç–æ: <b>{state.control_count}</b>\n"
            f"üí• –ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—Ç–∞–∫: <b>{state.missed_attacks}</b>\n"
            f"‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: <b>{state.total_points}</b>"
        )
        await query.message.reply_text(total_text, parse_mode="HTML")
        state.fight_sequence = []
        state.current_step = 0
        state.last_fight_message_id = None
    else:
        control, attack = state.fight_sequence[state.current_step]
        keyboard = [
            [InlineKeyboardButton("–ê–≥–µ —É–∫–µ", callback_data="defense_–ê–≥–µ —É–∫–µ")],
            [InlineKeyboardButton("–°–æ—Ç–æ —É–∫–µ", callback_data="defense_–°–æ—Ç–æ —É–∫–µ")],
            [InlineKeyboardButton("–£—á–∏ —É–∫–µ", callback_data="defense_–£—á–∏ —É–∫–µ")],
            [InlineKeyboardButton("–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", callback_data="defense_–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await query.message.reply_text(
            f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {state.current_step + 1} –∏–∑ 10</code>\n\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        state.last_fight_message_id = message.message_id
    
    context.user_data["state"] = state
