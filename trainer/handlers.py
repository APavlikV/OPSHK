import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards import (
    menu_keyboard, training_fight_keyboard, training_rules_keyboard,
    training_memo_keyboard, answer_keyboard, pvp_bot_keyboard,
    pvp_attack_keyboard, pvp_move_keyboard
)
from database import get_nickname, set_nickname
from data import DEFENSE_MOVES, ATTACK_PHRASES, DEFENSE_PHRASES
from game_logic import check_round, get_hint

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = get_nickname(user_id)
    if nickname:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!\n\n"
            f"ü•ã {nickname}, –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:",
            reply_markup=menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!\n\n"
            "ü•ã –£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã.\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ç–µ–∫—É—â–∏–π Telegram-–Ω–∏–∫.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram-–Ω–∏–∫", callback_data="use_telegram_nick")]
            ])
        )

async def setnick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        nickname = " ".join(context.args)
        set_nickname(update.effective_user.id, nickname)
        await update.message.reply_text(
            f"ü•ã –ù–∏–∫ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ:",
            reply_markup=menu_keyboard()
        )
    else:
        await update.message.reply_text("ü•ã –£–∫–∞–∂–∏ –Ω–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setnick –í–∞—Å—è")

async def handle_nick_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = update.message.text.strip()
    set_nickname(user_id, nickname)
    await update.message.reply_text(
        f"ü•ã –ù–∏–∫ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ:",
        reply_markup=menu_keyboard()
    )

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    await update.message.reply_text(
        "ü•ã –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º!",
        reply_markup=menu_keyboard()
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "training_fight":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã")
        await query.edit_message_text(
            "ü•ã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!",
            reply_markup=training_fight_keyboard()
        )

    elif query.data == "training_rules":
        rules_text = (
            "üìú –ü–†–ê–í–ò–õ–ê –¢–†–ï–ù–ò–†–û–í–ö–ò –ó–ê–©–ò–¢–´\n\n"
            "ü•∏ Bot –í–∞—Å—è –∞—Ç–∞–∫—É–µ—Ç, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É.\n"
            "1. –£ —Ç–µ–±—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ê–≥–µ —É–∫–µ, –£—á–∏ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π.\n"
            "2. –ö–∞–∂–¥–∞—è –∑–∞—â–∏—Ç–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏:\n"
            "   - –ê–≥–µ —É–∫–µ: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –î–ó.\n"
            "   - –£—á–∏ —É–∫–µ: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –î–ó.\n"
            "   - –°–æ—Ç–æ —É–∫–µ: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –î–ó.\n"
            "   - –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –ì–î–ù.\n"
            "3. –í –ø—Ä–æ—Å—Ç–æ–º –±–æ—é ‚Äî –≤—Ä–µ–º—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.\n"
            "4. –í –±–æ—é –Ω–∞ –≤—Ä–µ–º—è ‚Äî 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            rules_text,
            reply_markup=training_rules_keyboard()
        )

    elif query.data == "training_memo":
        memo_text = (
            "üìù –ü–ê–ú–Ø–¢–ö–ê –ü–û –ó–ê–©–ò–¢–ï\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞—â–∏—Ç—ã:\n"
            "- –ê–≥–µ —É–∫–µ: –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫ –≤ –≥–æ–ª–æ–≤—É (–î–ó).\n"
            "- –£—á–∏ —É–∫–µ: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –°–°, –¢–†, –î–ó.\n"
            "- –°–æ—Ç–æ —É–∫–µ: –±–ª–æ–∫–∏—Ä—É–µ—Ç –°–°, –¢–†, –î–ó.\n"
            "- –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∞—Ç–∞–∫ –Ω–∏–∂–µ –ø–æ—è—Å–∞ (–ì–î–ù), –°–°, –¢–†.\n\n"
            "üí° –í –±–æ—é –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É!\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            memo_text,
            reply_markup=training_memo_keyboard()
        )

    elif query.data == "simple_fight":
        context.user_data["mode"] = "simple_fight"
        context.user_data["control"], context.user_data["attack"] = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        control, attack = context.user_data["control"], context.user_data["attack"]
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        await query.edit_message_text(
            f"ü•ä –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n\n"
            f"ü•∏ Bot –í–∞—Å—è: {control_phrase} {attack_phrase}\n\n"
            f"üõ°Ô∏è –í—ã–±–µ—Ä–∏ –∑–∞—â–∏—Ç—É:",
            reply_markup=answer_keyboard(True)
        )

    elif query.data == "timed_fight":
        context.user_data["mode"] = "timed_fight"
        context.user_data["control"], context.user_data["attack"] = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        control, attack = context.user_data["control"], context.user_data["attack"]
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        await query.edit_message_text(
            f"ü•ä –ë–û–ô –ù–ê –í–†–ï–ú–Ø!\n\n"
            f"ü•∏ Bot –í–∞—Å—è: {control_phrase} {attack_phrase}\n\n"
            f"üõ°Ô∏è –í—ã–±–µ—Ä–∏ –∑–∞—â–∏—Ç—É (10 —Å–µ–∫):",
            reply_markup=answer_keyboard(True)
        )

    elif query.data in DEFENSE_MOVES:
        defense = query.data
        control = context.user_data.get("control")
        attack = context.user_data.get("attack")
        if not control or not attack:
            await query.message.reply_text("ü•ã –û—à–∏–±–∫–∞: –∞—Ç–∞–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏ –±–æ–π –∑–∞–Ω–æ–≤–æ!", reply_markup=menu_keyboard())
            return
        result = check_round(control, attack, defense)
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        defense_phrase = random.choice(DEFENSE_PHRASES["defense_success" if result["defense_attack_success"] else "defense_fail"][attack])
        counter_phrase = random.choice(DEFENSE_PHRASES["counter_success" if result["counter_success"] else "counter_fail"][defense])
        await query.edit_message_text(
            f"ü•ä –†–ï–ó–£–õ–¨–¢–ê–¢:\n\n"
            f"ü•∏ Bot –í–∞—Å—è: {control_phrase} {attack_phrase}\n"
            f"–¢—ã: {defense_phrase}\n"
            f"{counter_phrase if result['counter_success'] else ''}\n\n"
            f"üèÜ {'–£–°–ü–ï–•' if result['defense_attack_success'] else '–ü–û–†–ê–ñ–ï–ù–ò–ï'}"
        )
        context.user_data["control"] = None
        context.user_data["attack"] = None
        await query.message.reply_text(
            "ü•ã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=training_fight_keyboard()
        )

    elif query.data == "hint":
        control = context.user_data.get("control")
        attack = context.user_data.get("attack")
        if control and attack:
            hint = get_hint(control, attack)
            await query.message.reply_text(
                f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}",
                reply_markup=answer_keyboard(True)
            )
        else:
            await query.message.reply_text(
                "ü•ã –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∞—Ç–∞–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!",
                reply_markup=answer_keyboard()
            )

    elif query.data == "pvp_bot":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º PvP: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é")
        await query.edit_message_text(
            "ü•ä –°–ü–û–†–¢–ò–í–ù–´–ô –ë–û–ô: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!",
            reply_markup=pvp_bot_keyboard()
        )

    elif query.data == "pvp_rules":
        rules_text = (
            "–ü–†–ê–í–ò–õ–ê –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–û–ï–î–ò–ù–ö–ê\n"
            "‚ûñ\n"
            "–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å ü•∏ Bot –í–∞—Å–µ–π –Ω–∞ —Å—á—ë—Ç.\n\n"
            "–°—Ö–≤–∞—Ç–∫–∞:\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ —É—Ä–æ–≤–Ω–∏ üéØ –ö–æ–Ω—Ç—Ä–æ–ª—è –∏ üí• –ê—Ç–∞–∫–∏ (–°–°, –¢–†, –î–ó).\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ üõ°Ô∏è –ó–∞—â–∏—Ç—É (–ê–≥–µ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –£—á–∏ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π).\n\n"
            "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:\n"
            "–¢–æ—Ä–∏:\n"
            "- üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: +1.\n"
            "- üí• –ê—Ç–∞–∫–∞: +2 (–µ—Å–ª–∏ –ö–æ–Ω—Ç—Ä–æ–ª—å —É—Å–ø–µ—à–µ–Ω ‚úÖ) –∏–ª–∏ +1.\n"
            "–£–∫–µ:\n"
            "- ‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è —É–¥–∞–ª–∞—Å—å ‚úÖ).\n"
            "- üî• –î–æ–±–∏–≤–∞–Ω–∏–µ: +2 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ö–æ–Ω—Ç—Ä–æ–ª—è –∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ —É—Å–ø–µ—à–Ω—ã ‚úÖ).\n"
            "- üõë –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏: +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ö–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ —É–¥–∞–ª–∞—Å—å ‚ùå, –Ω–æ –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ —É—Å–ø–µ—à–Ω–∞ ‚úÖ).\n\n"
            "üèÜ –ü–æ–±–µ–¥–∞:\n"
            "- –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–µ–º, –∫—Ç–æ –∑–∞ 5 —Å—Ö–≤–∞—Ç–æ–∫ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤."
        )
        await query.edit_message_text(
            rules_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_start")]
            ])
        )

    elif query.data == "pvp_start":
        logger.info("–ù–∞—á–∞–ª–æ PvP –±–æ—è")
        context.user_data["step"] = 1
        context.user_data["player_score"] = 0
        context.user_data["bot_score"] = 0
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None
        context.user_data["log"] = []
        await query.edit_message_text(
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
            f"üéØ –ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n"
            f"1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è",
            reply_markup=pvp_attack_keyboard("control")
        )

    elif query.data.startswith("attack_control_"):
        control = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å: {control}")
        context.user_data["player_control"] = control
        try:
            await query.edit_message_text(
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
                f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: {control}\n"
                f"üí• –í—ã–±–µ—Ä–∏ –∞—Ç–∞–∫—É:"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}", exc_info=True)
            await query.message.reply_text("ü•ã –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data.startswith("attack_hit_"):
        if not context.user_data.get("player_control"):
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –∞—Ç–∞–∫—É –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è")
            current_text = query.message.text or ""
            new_text = (
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
                f"üéØ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è!"
            )
            if current_text.strip() != new_text.strip():
                await query.edit_message_text(
                    new_text,
                    reply_markup=pvp_attack_keyboard("control")
                )
            return
        attack = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫–∞: {attack}")
        context.user_data["player_attack"] = attack
        step = context.user_data["step"]
        try:
            await query.edit_message_text(
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}\n\n"
                f"–¢–≤–æ—è –∞—Ç–∞–∫–∞: üéØ {context.user_data['player_control']} üí• {context.user_data['player_attack']}\n"
                f"üõ°Ô∏è –í—ã–±–µ—Ä–∏ –∑–∞—â–∏—Ç—É:"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏: {e}", exc_info=True)
            await query.message.reply_text("ü•ã –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data in DEFENSE_MOVES:
        context.user_data["player_defense"] = query.data
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞—â–∏—Ç–∞: {query.data}")
        try:
            await query.edit_message_text(
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
                f"–¢–≤–æ–π —Ö–æ–¥:\n"
                f"üéØ {context.user_data['player_control']} üí• {context.user_data['player_attack']}\n"
                f"üõ°Ô∏è {context.user_data['player_defense']}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏:"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞—â–∏—Ç—ã: {e}", exc_info=True)
            await query.message.reply_text("ü•ã –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data == "pvp_move":
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ PvP")
        player_control = context.user_data.get("player_control")
        player_attack = context.user_data.get("player_attack")
        player_defense = context.user_data.get("player_defense")
        bot_control, bot_attack = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        bot_defense = random.choice(list(DEFENSE_MOVES.keys()))

        if not all([player_control, player_attack, player_defense]):
            logger.error(
                f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–¥–∞: –∫–æ–Ω—Ç—Ä–æ–ª—å={player_control}, –∞—Ç–∞–∫–∞={player_attack}, –∑–∞—â–∏—Ç–∞={player_defense}"
            )
            await query.message.reply_text("ü•ã –û—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())
            return

        player_result = check_round(bot_control, bot_attack, player_defense)
        bot_result = check_round(player_control, player_attack, bot_defense)

        player_score = (
            (1 if bot_result["control_success"] else 0) +
            (2 if bot_result["attack_success"] and bot_result["control_success"] else 1 if bot_result["attack_success"] else 0) +
            (1 if player_result["defense_control_success"] else 0) +
            (1 if player_result["counter_success"] else 0) +
            (2 if player_result["defense_control_success"] and player_result["defense_attack_success"] else 1 if player_result["defense_attack_success"] else 0)
        )
        bot_score = (
            (1 if player_result["control_success"] else 0) +
            (2 if player_result["attack_success"] and player_result["control_success"] else 1 if player_result["attack_success"] else 0) +
            (1 if bot_result["defense_control_success"] else 0) +
            (1 if bot_result["counter_success"] else 0) +
            (2 if bot_result["defense_control_success"] and bot_result["defense_attack_success"] else 1 if bot_result["defense_attack_success"] else 0)
        )

        context.user_data["player_score"] += player_score
        context.user_data["bot_score"] += bot_score

        log_message = (
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
            f"ü•ã –¢–æ—Ä–∏ (–¢—ã):\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å {player_control} {'‚úÖ' if bot_result['control_success'] else '‚ùå'} (+{1 if bot_result['control_success'] else 0})\n"
            f"üí• –ê—Ç–∞–∫–∞ {player_attack} {'‚úÖ' if bot_result['attack_success'] else '‚ùå'} (+{2 if bot_result['attack_success'] and bot_result['control_success'] else 1 if bot_result['attack_success'] else 0})\n\n"
            f"ü•∏ –£–∫–µ (Bot –í–∞—Å—è):\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ {bot_defense}\n"
            f"üõë –ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è: {'‚úÖ' if bot_result['defense_control_success'] else '‚ùå'} (+{1 if bot_result['defense_control_success'] else 0})\n"
            f"‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {'‚úÖ' if bot_result['counter_success'] else '‚ùå'} (+{1 if bot_result['counter_success'] else 0})\n"
            f"üî• –î–æ–±–∏–≤–∞–Ω–∏–µ: {'‚úÖ' if bot_result['defense_control_success'] and bot_result['defense_attack_success'] else '‚ùå'} (+{2 if bot_result['defense_control_success'] and bot_result['defense_attack_success'] else 1 if bot_result['defense_attack_success'] else 0})\n\n"
            f"--------\n\n"
            f"ü•∏ –¢–æ—Ä–∏ (Bot –í–∞—Å—è):\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å {bot_control} {'‚úÖ' if player_result['control_success'] else '‚ùå'} (+{1 if player_result['control_success'] else 0})\n"
            f"üí• –ê—Ç–∞–∫–∞ {bot_attack} {'‚úÖ' if player_result['attack_success'] else '‚ùå'} (+{2 if player_result['attack_success'] and player_result['control_success'] else 1 if player_result['attack_success'] else 0})\n\n"
            f"ü•ã –£–∫–µ (–¢—ã):\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ {player_defense}\n"
            f"üõë –ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è: {'‚úÖ' if player_result['defense_control_success'] else '‚ùå'} (+{1 if player_result['defense_control_success'] else 0})\n"
            f"‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {'‚úÖ' if player_result['counter_success'] else '‚ùå'} (+{1 if player_result['counter_success'] else 0})\n"
            f"üî• –î–æ–±–∏–≤–∞–Ω–∏–µ: {'‚úÖ' if player_result['defense_control_success'] and player_result['defense_attack_success'] else '‚ùå'} (+{2 if player_result['defense_control_success'] and player_result['defense_attack_success'] else 1 if player_result['defense_attack_success'] else 0})\n\n"
            f"üèÜ –°—á—ë—Ç: –¢—ã {context.user_data['player_score']} - Bot –í–∞—Å—è {context.user_data['bot_score']}"
        )
        context.user_data["log"].append(log_message)

        await query.message.delete()
        await query.message.reply_text(
            log_message
        )

        context.user_data["step"] += 1
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None

        if context.user_data["step"] <= 5:
            await query.message.reply_text(
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}\n\n"
                f"üéØ –ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n"
                f"1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è",
                reply_markup=pvp_attack_keyboard("control")
            )
        else:
            user_id = update.effective_user.id
            nickname = get_nickname(user_id) or "–ö–∞—Ä–∞—Ç—ç–∫–∞"
            winner = nickname if context.user_data["player_score"] > context.user_data["bot_score"] else \
                "Bot –í–∞—Å—è" if context.user_data["bot_score"] > context.user_data["player_score"] else "–ù–∏—á—å—è"
            final_message = (
                f"üèÜ –ë–û–ô –ó–ê–í–ï–†–®–Å–ù!\n\n"
                f"–°–æ —Å—á—ë—Ç–æ–º {context.user_data['player_score']} - {context.user_data['bot_score']} "
                f"–ø–æ–±–µ–¥–∏–ª {winner}!\n\n"
                f"üìú –õ–æ–≥ –±–æ—è:\n"
                f"{'-' * 20}\n"
                f"\n{'-' * 20}\n".join(context.user_data["log"])
            )
            await query.message.reply_text(
                final_message,
                reply_markup=menu_keyboard()
            )
