import logging
import random
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards import (
    menu_keyboard, training_fight_keyboard, training_rules_keyboard,
    training_memo_keyboard, answer_keyboard, pvp_bot_keyboard,
    pvp_attack_keyboard, pvp_move_keyboard
)
from database import get_nickname, set_nickname
from data import DEFENSE_MOVES, ATTACK_PHRASES, DEFENSE_PHRASES
from game_logic import check_round, get_hint

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = get_nickname(user_id)
    if nickname:
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {nickname}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
            reply_markup=menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π Telegram-–Ω–∏–∫.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram-–Ω–∏–∫", callback_data="use_telegram_nick")]
            ])
        )

async def setnick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        nickname = " ".join(context.args)
        set_nickname(update.effective_user.id, nickname)
        await update.message.reply_text(
            f"–ù–∏–∫ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
            reply_markup=menu_keyboard()
        )
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setnick –í–∞—Å—è")

async def handle_nick_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = update.message.text.strip()
    set_nickname(user_id, nickname)
    await update.message.reply_text(
        f"–ù–∏–∫ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=menu_keyboard()
    )

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=menu_keyboard()
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "training_fight":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã")
        await query.edit_message_text(
            "ü•ã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=training_fight_keyboard()
        )

    elif query.data == "training_rules":
        rules_text = (
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã:</b>\n\n"
            "1. –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É.\n"
            "2. –£ –≤–∞—Å –µ—Å—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ê–≥–µ —É–∫–µ, –£—á–∏ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π.\n"
            "3. –ö–∞–∂–¥–∞—è –∑–∞—â–∏—Ç–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏:\n"
            "   - <b>–ê–≥–µ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –î–ó.\n"
            "   - <b>–£—á–∏ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –î–ó.\n"
            "   - <b>–°–æ—Ç–æ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –î–ó.\n"
            "   - <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –°–°, –¢–†, –ì–î–ù.\n"
            "4. –í –ø—Ä–æ—Å—Ç–æ–º –±–æ—é —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "5. –í –±–æ—é –Ω–∞ –≤—Ä–µ–º—è ‚Äî 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            rules_text,
            reply_markup=training_rules_keyboard(),
            parse_mode="HTML"
        )

    elif query.data == "training_memo":
        memo_text = (
            "üìù <b>–ü–∞–º—è—Ç–∫–∞ –ø–æ –∑–∞—â–∏—Ç–µ:</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –ø–∞–º—è—Ç–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞—â–∏—Ç—ã:\n"
            "- <b>–ê–≥–µ —É–∫–µ</b>: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫ –≤ –≥–æ–ª–æ–≤—É (–î–ó).\n"
            "- <b>–£—á–∏ —É–∫–µ</b>: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –°–°, –¢–†, –î–ó.\n"
            "- <b>–°–æ—Ç–æ —É–∫–µ</b>: –Ω–∞–¥—ë–∂–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –°–°, –¢–†, –î–ó.\n"
            "- <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>: –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∞—Ç–∞–∫ –Ω–∏–∂–µ –ø–æ—è—Å–∞ (–ì–î–ù) –∏ –°–°, –¢–†.\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤ –±–æ—é –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å üí° –ü–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –∑–∞—â–∏—Ç–∞ –ª—É—á—à–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            memo_text,
            reply_markup=training_memo_keyboard(),
            parse_mode="HTML"
        )

    elif query.data == "simple_fight":
        context.user_data["mode"] = "simple_fight"
        context.user_data["control"], context.user_data["attack"] = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        control, attack = context.user_data["control"], context.user_data["attack"]
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        await query.edit_message_text(
            f"<b>ü•ä –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç!</b>\n\n"
            f"–ë–æ—Ç {control_phrase} {attack_phrase}\n\n"
            f"<b>üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:</b>",
            reply_markup=answer_keyboard(True),
            parse_mode="HTML"
        )

    elif query.data == "timed_fight":
        context.user_data["mode"] = "timed_fight"
        context.user_data["control"], context.user_data["attack"] = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        control, attack = context.user_data["control"], context.user_data["attack"]
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        await query.edit_message_text(
            f"<b>ü•ä –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç!</b>\n\n"
            f"–ë–æ—Ç {control_phrase} {attack_phrase}\n\n"
            f"<b>üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É (10 —Å–µ–∫):</b>",
            reply_markup=answer_keyboard(True),
            parse_mode="HTML"
        )

    elif query.data in DEFENSE_MOVES:
        defense = query.data
        control = context.user_data.get("control")
        attack = context.user_data.get("attack")
        if not control or not attack:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –∞—Ç–∞–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –±–æ–π –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard())
            return
        result = check_round(control, attack, defense)
        control_phrase = random.choice(ATTACK_PHRASES["control_success"][control])
        attack_phrase = random.choice(ATTACK_PHRASES["attack_success"][attack])
        defense_phrase = random.choice(DEFENSE_PHRASES["defense_success" if result["defense_success"] else "defense_fail"][attack])
        counter_phrase = random.choice(DEFENSE_PHRASES["counter_success" if result["counter_success"] else "counter_fail"][defense])
        await query.edit_message_text(
            f"<b>ü•ä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n"
            f"–ë–æ—Ç: {control_phrase} {attack_phrase}\n"
            f"–í—ã: {defense_phrase}\n"
            f"{counter_phrase if result['counter_success'] else ''}\n\n"
            f"<b>–°—á—ë—Ç:</b> {'–£—Å–ø–µ—à–Ω–æ' if result['defense_success'] else '–ü—Ä–æ–≤–∞–ª'}",
            parse_mode="HTML"
        )
        context.user_data["control"] = None
        context.user_data["attack"] = None
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=training_fight_keyboard()
        )

    elif query.data == "hint":
        control = context.user_data.get("control")
        attack = context.user_data.get("attack")
        if control and attack:
            hint = get_hint(control, attack)
            await query.message.reply_text(
                f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}",
                reply_markup=answer_keyboard(True)
            )
        else:
            await query.message.reply_text(
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∞—Ç–∞–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.",
                reply_markup=answer_keyboard()
            )

    elif query.data == "pvp_bot":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º PvP: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é")
        await query.edit_message_text(
            "ü•ä –ë–æ–π —Å –±–æ—Ç–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=pvp_bot_keyboard()
        )

    elif query.data == "pvp_rules":
        rules_text = (
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è:</b>\n\n"
            "1. –ë–æ–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —Å—Ö–≤–∞—Ç–æ–∫.\n"
            "2. –í—ã –∏ –±–æ—Ç –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –∞—Ç–∞–∫—É–µ—Ç–µ –∏ –∑–∞—â–∏—â–∞–µ—Ç–µ—Å—å.\n"
            "3. –ê—Ç–∞–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n"
            "   - <b>–ö–æ–Ω—Ç—Ä–æ–ª—å</b> (–°–°, –¢–†).\n"
            "   - <b>–ê—Ç–∞–∫–∞</b> (–°–°, –¢–†, –î–ó).\n"
            "4. –ó–∞—â–∏—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑: –ê–≥–µ —É–∫–µ, –£—á–∏ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π.\n"
            "5. –û—á–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è:\n"
            "   - üéØ –£—Å–ø–µ—à–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å: +1\n"
            "   - üí• –£—Å–ø–µ—à–Ω–∞—è –∞—Ç–∞–∫–∞: +1\n"
            "   - üõë –£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è: +1\n"
            "   - ‚û°Ô∏è –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: +1\n"
            "   - üî• –£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏: +1\n"
            "6. –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–±—Ä–∞–≤—à–∏–π –±–æ–ª—å—à–µ –æ—á–∫–æ–≤.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            rules_text,
            reply_markup=pvp_bot_keyboard(),
            parse_mode="HTML"
        )

    elif query.data == "pvp_start":
        logger.info("–ù–∞—á–∞–ª–æ PvP –±–æ—è")
        context.user_data["step"] = 1
        context.user_data["player_score"] = 0
        context.user_data["bot_score"] = 0
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None
        context.user_data["log"] = []
        await query.edit_message_text(
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ 1</u>\n\n"
            f"<b>üëä –ê—Ç–∞–∫–∞:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å:",
            reply_markup=pvp_attack_keyboard("control"),
            parse_mode="HTML"
        )

    elif query.data.startswith("attack_control_"):
        control = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å: {control}")
        context.user_data["player_control"] = control
        try:
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}</u>\n\n"
                f"–í–∞—à –∫–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                f"<b>üëä –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É:</b>",
                reply_markup=pvp_attack_keyboard("attack"),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data.startswith("attack_hit_"):
        if not context.user_data.get("player_control"):
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –∞—Ç–∞–∫—É –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è")
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}</u>\n\n"
                f"<b>üëä –ê—Ç–∞–∫–∞:</b> –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å:",
                reply_markup=pvp_attack_keyboard("control"),
                parse_mode="HTML"
            )
            return
        attack = query.data.split("_")[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫–∞: {attack}")
        context.user_data["player_attack"] = attack
        step = context.user_data["step"]
        try:
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}</u>\n\n"
                f"–í–∞—à–∞ –∞—Ç–∞–∫–∞: <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>, <i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
                f"<b>üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:</b>",
                reply_markup=answer_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data in DEFENSE_MOVES:
        context.user_data["player_defense"] = query.data
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞—â–∏—Ç–∞: {query.data}")
        try:
            await query.edit_message_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}</u>\n\n"
                f"–í–∞—à —Ö–æ–¥\n"
                f"üëä –ê—Ç–∞–∫–∞: <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>, <i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
                f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: <b>{context.user_data['player_defense']}</b>\n\n"
                f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:</b>",
                reply_markup=pvp_move_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞—â–∏—Ç—ã: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())

    elif query.data == "pvp_move":
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ PvP")
        player_control = context.user_data.get("player_control")
        player_attack = context.user_data.get("player_attack")
        player_defense = context.user_data.get("player_defense")
        bot_control, bot_attack = random.choice([("–°–°", "–î–ó"), ("–°–°", "–¢–†"), ("–¢–†", "–°–°"), ("–î–ó", "–¢–†")])
        bot_defense = random.choice(list(DEFENSE_MOVES.keys()))

        if not all([player_control, player_attack, player_defense]):
            logger.error(
                f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–¥–∞: –∫–æ–Ω—Ç—Ä–æ–ª—å={player_control}, –∞—Ç–∞–∫–∞={player_attack}, –∑–∞—â–∏—Ç–∞={player_defense}, "
                f"bot_control={bot_control}, bot_attack={bot_attack}"
            )
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard())
            return

        player_result = check_round(bot_control, bot_attack, player_defense)
        bot_result = check_round(player_control, player_attack, bot_defense)

        player_score = (
            (1 if bot_result["control_success"] else 0) +
            (1 if bot_result["attack_success"] else 0) +
            (1 if player_result["defense_control_success"] else 0) +
            (1 if player_result["counter_success"] else 0) +
            (1 if player_result["defense_attack_success"] else 0)
        )
        bot_score = (
            (1 if player_result["control_success"] else 0) +
            (1 if player_result["attack_success"] else 0) +
            (1 if bot_result["defense_control_success"] else 0) +
            (1 if bot_result["counter_success"] else 0) +
            (1 if bot_result["defense_attack_success"] else 0)
        )

        context.user_data["player_score"] += player_score
        context.user_data["bot_score"] += bot_score

        log_message = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}</u>\n\n"
            f"<b>–¢–æ—Ä–∏ –í—ã:</b>\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å {player_control} {'‚úÖ' if bot_result['control_success'] else '‚ùå'} (+{1 if bot_result['control_success'] else 0})\n"
            f"üí• –ê—Ç–∞–∫–∞ {player_attack} {'‚úÖ' if bot_result['attack_success'] else '‚ùå'} (+{1 if bot_result['attack_success'] else 0})\n\n"
            f"<b>–£–∫–µ –ë–æ—Ç:</b>\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ {bot_defense}\n"
            f"üõë –ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è: {'‚úÖ' if bot_result['defense_control_success'] else '‚ùå'} (+{1 if bot_result['defense_control_success'] else 0})\n"
            f"‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {'‚úÖ' if bot_result['counter_success'] else '‚ùå'} (+{1 if bot_result['counter_success'] else 0})\n"
            f"üî• –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏: {'‚úÖ' if bot_result['defense_attack_success'] else '‚ùå'} (+{1 if bot_result['defense_attack_success'] else 0})\n\n"
            f"--------\n\n"
            f"<b>–¢–æ—Ä–∏ –ë–æ—Ç:</b>\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å {bot_control} {'‚úÖ' if player_result['control_success'] else '‚ùå'} (+{1 if player_result['control_success'] else 0})\n"
            f"üí• –ê—Ç–∞–∫–∞ {bot_attack} {'‚úÖ' if player_result['attack_success'] else '‚ùå'} (+{1 if player_result['attack_success'] else 0})\n\n"
            f"<b>–£–∫–µ –í—ã:</b>\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ {player_defense}\n"
            f"üõë –ó–∞—â–∏—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è: {'‚úÖ' if player_result['defense_control_success'] else '‚ùå'} (+{1 if player_result['defense_control_success'] else 0})\n"
            f"‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: {'‚úÖ' if player_result['counter_success'] else '‚ùå'} (+{1 if player_result['counter_success'] else 0})\n"
            f"üî• –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏: {'‚úÖ' if player_result['defense_attack_success'] else '‚ùå'} (+{1 if player_result['defense_attack_success'] else 0})\n\n"
            f"<b>ü•ä –°—á—ë—Ç: –í—ã {context.user_data['player_score']} - –ë–æ—Ç {context.user_data['bot_score']}</b>"
        )
        context.user_data["log"].append(log_message)

        await query.message.delete()
        await query.message.reply_text(
            log_message,
            parse_mode="HTML"
        )

        context.user_data["step"] += 1
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None

        if context.user_data["step"] <= 5:
            await query.message.reply_text(
                f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {context.user_data['step']}</u>\n\n"
                f"<b>üëä –ê—Ç–∞–∫–∞:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å:",
                reply_markup=pvp_attack_keyboard("control"),
                parse_mode="HTML"
            )
        else:
            user_id = update.effective_user.id
            nickname = get_nickname(user_id) or "–ò–≥—Ä–æ–∫"
            winner = nickname if context.user_data["player_score"] > context.user_data["bot_score"] else \
                "–ë–æ—Ç" if context.user_data["bot_score"] > context.user_data["player_score"] else "–ù–∏—á—å—è"
            final_message = (
                f"<b>üèÜ –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
                f"<u>–°–æ —Å—á—ë—Ç–æ–º {context.user_data['player_score']} - {context.user_data['bot_score']} "
                f"–æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É</u>\n"
                f"<b>üèÜ {winner}</b>\n\n"
                f"<i>–õ–æ–≥ –±–æ—è:</i>\n"
                f"{'-' * 20}\n"
                f"\n{'-' * 20}\n".join(context.user_data["log"])
            )
            await query.message.reply_text(
                final_message,
                parse_mode="HTML",
                reply_markup=menu_keyboard()
            )
