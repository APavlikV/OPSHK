from telegram.ext import ContextTypes
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import menu_keyboard, training_mode_keyboard, answer_keyboard, pvp_bot_keyboard, pvp_attack_keyboard, pvp_move_keyboard
from game_logic import generate_fight_sequence, check_move, generate_short_log, generate_detailed_log, generate_final_stats
from data import MOVES, DEFENSE_MOVES
import logging
from datetime import datetime, timedelta
from telegram.error import BadRequest
import random

logger = logging.getLogger(__name__)

def get_start_keyboard():
    keyboard = [["–ò–≥—Ä–∞"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    if context.user_data is None:
        context.user_data = {}
    await update.message.reply_text(
        "ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!\n–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b> –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!",
        parse_mode="HTML",
        reply_markup=get_start_keyboard()
    )

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    if context.user_data is None:
        context.user_data = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=menu_keyboard()
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    if context.user_data is None:
        context.user_data = {}

    if query.data == "training_fight":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:", reply_markup=training_mode_keyboard())
    elif query.data in ["simple_fight", "timed_fight"]:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        context.user_data["fight_sequence"] = generate_fight_sequence()
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["timer_ended"] = False
        await show_next_move(context, query.message.chat_id, query.data, context.user_data["fight_sequence"], 0)
        await query.delete_message()
    elif query.data == "pvp_bot":
        await query.edit_message_text("–ë–æ–π —Å –±–æ—Ç–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=pvp_bot_keyboard())
    elif query.data == "pvp_rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–û–ï–î–ò–ù–ö–ê</b>\n‚ûñ\n"
            "–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å <b>Bot –í–∞—Å–µ–π</b> –∑–∞ –æ—á–∫–∏.\n\n"
            "<u>–°—Ö–≤–∞—Ç–∫–∞:</u>\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å</b> –∏ <b>–ê—Ç–∞–∫—É</b> (–°–°, –¢–†, –î–ó).\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ó–∞—â–∏—Ç—É</b> (–ê–≥–µ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –£—á–∏ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π).\n\n"
            "<u>–û—á–∫–∏:</u>\n"
            "- –ö–æ–Ω—Ç—Ä–æ–ª—å: +1.\n"
            "- –ê—Ç–∞–∫–∞: +2 (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Å–ø–µ—à–µ–Ω) –∏–ª–∏ +1.\n"
            "- –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è).\n"
            "- –î–æ–±–∏–≤–∞–Ω–∏–µ: +2 (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏).\n\n"
            "<u>–ü–æ–±–µ–¥–∞:</u>\n"
            "- –†–∞–∑—Ä—ã–≤ –≤ 8 –æ—á–∫–æ–≤ –∏–ª–∏ 5 –º–∏–Ω—É—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_start")]]),
            parse_mode="HTML"
        )
    elif query.data == "pvp_start":
        context.user_data["pvp_mode"] = "sport"  # –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ–µ–¥–∏–Ω–æ–∫
        context.user_data["player_score"] = 0
        context.user_data["bot_score"] = 0
        context.user_data["step"] = 0
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None
        context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∞—Ç–∞–∫—É:\n1. –ö–æ–Ω—Ç—Ä–æ–ª—å (–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞)\n2. –ê—Ç–∞–∫–∞ (–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞)",
            reply_markup=pvp_attack_keyboard()
        )
    elif query.data.startswith("attack_control_"):
        context.user_data["player_control"] = query.data.split("_")[2]
        if context.user_data["player_attack"]:
            await query.edit_message_text(
                f"–í–∞—à —Ö–æ–¥: –ö–æ–Ω—Ç—Ä–æ–ª—å {context.user_data['player_control']}, –ê—Ç–∞–∫–∞ {context.user_data['player_attack']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:",
                reply_markup=answer_keyboard()
            )
        else:
            await query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É (–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞):", reply_markup=pvp_attack_keyboard())
    elif query.data.startswith("attack_hit_"):
        context.user_data["player_attack"] = query.data.split("_")[2]
        if context.user_data["player_control"]:
            await query.edit_message_text(
                f"–í–∞—à —Ö–æ–¥: –ö–æ–Ω—Ç—Ä–æ–ª—å {context.user_data['player_control']}, –ê—Ç–∞–∫–∞ {context.user_data['player_attack']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:",
                reply_markup=answer_keyboard()
            )
        else:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å (–≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞):", reply_markup=pvp_attack_keyboard())
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"] and "pvp_mode" in context.user_data:
        context.user_data["player_defense"] = query.data
        await query.edit_message_text(
            f"–í–∞—à —Ö–æ–¥: –ö–æ–Ω—Ç—Ä–æ–ª—å {context.user_data['player_control']}, –ê—Ç–∞–∫–∞ {context.user_data['player_attack']}, –ó–∞—â–∏—Ç–∞ {context.user_data['player_defense']}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
            reply_markup=pvp_move_keyboard()
        )
    elif query.data == "pvp_move":
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—è
        player_control = context.user_data["player_control"]
        player_attack = context.user_data["player_attack"]
        player_defense = context.user_data["player_defense"]
        bot_control = context.user_data["bot_control"]
        bot_attack = context.user_data["bot_attack"]
        bot_defense = random.choice(["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"])

        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        player_control_success = bot_defense != DEFENSE_MOVES[bot_defense]["control"] != bot_control
        player_attack_success = player_attack not in DEFENSE_MOVES[bot_defense]["attack_defense"]
        bot_counter_success = not player_control_success
        bot_dobivanie_success = bot_counter_success and player_attack not in DEFENSE_MOVES[bot_defense]["counter"]

        if player_control_success:
            context.user_data["player_score"] += 1
            if player_attack_success:
                context.user_data["player_score"] += 2
        elif player_attack_success:
            context.user_data["player_score"] += 1
        if bot_counter_success:
            context.user_data["bot_score"] += 1
            if bot_dobivanie_success:
                context.user_data["bot_score"] += 2

        # –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        bot_control_success = player_defense != DEFENSE_MOVES[player_defense]["control"] != bot_control
        bot_attack_success = bot_attack not in DEFENSE_MOVES[player_defense]["attack_defense"]
        player_counter_success = not bot_control_success
        player_dobivanie_success = player_counter_success and bot_attack not in DEFENSE_MOVES[player_defense]["counter"]

        if bot_control_success:
            context.user_data["bot_score"] += 1
            if bot_attack_success:
                context.user_data["bot_score"] += 2
        elif bot_attack_success:
            context.user_data["bot_score"] += 1
        if player_counter_success:
            context.user_data["player_score"] += 1
            if player_dobivanie_success:
                context.user_data["player_score"] += 2

        step = context.user_data["step"] + 1
        context.user_data["step"] = step
        log = (
            f"–°—Ö–≤–∞—Ç–∫–∞ {step}:\n"
            f"–í—ã: –ö–æ–Ω—Ç—Ä–æ–ª—å {player_control} {'—É—Å–ø–µ—Ö' if player_control_success else '–Ω–µ—É—Å–ø–µ—Ö'}, "
            f"–ê—Ç–∞–∫–∞ {player_attack} {'—É—Å–ø–µ—Ö' if player_attack_success else '–Ω–µ—É—Å–ø–µ—Ö'}\n"
            f"–ë–æ—Ç: –ö–æ–Ω—Ç—Ä–æ–ª—å {bot_control} {'—É—Å–ø–µ—Ö' if bot_control_success else '–Ω–µ—É—Å–ø–µ—Ö'}, "
            f"–ê—Ç–∞–∫–∞ {bot_attack} {'—É—Å–ø–µ—Ö' if bot_attack_success else '–Ω–µ—É—Å–ø–µ—Ö'}\n"
            f"–°—á—ë—Ç: –í—ã {context.user_data['player_score']} - –ë–æ—Ç {context.user_data['bot_score']}"
        )
        await query.edit_message_text(log)
        if abs(context.user_data["player_score"] - context.user_data["bot_score"]) >= 8 or step >= 5:  # 5 —Å—Ö–≤–∞—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
            winner = "–í—ã" if context.user_data["player_score"] > context.user_data["bot_score"] else "–ë–æ—Ç" if context.user_data["bot_score"] > context.user_data["player_score"] else "–ù–∏—á—å—è"
            await query.message.reply_text(f"–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}", reply_markup=get_start_keyboard())
            context.user_data.clear()
        else:
            context.user_data["player_control"] = None
            context.user_data["player_attack"] = None
            context.user_data["player_defense"] = None
            context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∞—Ç–∞–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–≤–∞—Ç–∫–∏:",
                reply_markup=pvp_attack_keyboard()
            )
