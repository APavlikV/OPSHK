from telegram.ext import ContextTypes
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import menu_keyboard, training_mode_keyboard, answer_keyboard, pvp_bot_keyboard, pvp_attack_keyboard, pvp_move_keyboard
from game_logic import generate_fight_sequence, check_move, generate_short_log, generate_detailed_log, generate_final_stats
from data import MOVES, DEFENSE_MOVES
import logging
from telegram.error import BadRequest
import random

logger = logging.getLogger(__name__)

def get_start_keyboard():
    keyboard = [["–ò–≥—Ä–∞"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    if context.user_data is None:
        context.user_data = {}
    await update.message.reply_text(
        "ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!\n–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b> –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!",
        parse_mode="HTML",
        reply_markup=get_start_keyboard()
    )

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    if context.user_data is None:
        context.user_data = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=menu_keyboard()
    )

async def update_timer(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    if not job.data.get("active", True):
        return
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    remaining = job.data["remaining"] - 1
    job.data["remaining"] = remaining
    try:
        control, attack = job.data["current_move"]
        step = job.data["step"]
        text = (
            f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
        )
        if remaining > 0:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=message_id, text=text, reply_markup=answer_keyboard(), parse_mode="HTML"
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    job.data["active"] = False
                    return
                raise
        else:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=message_id, text="–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML"
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                else:
                    raise
            job.data["timer_ended"] = True
            job.data["active"] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_timer: {e}", exc_info=True)
        job.data["active"] = False
    finally:
        if not job.data.get("active", True):
            try:
                job.schedule_removal()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ update_timer: {e}")

async def show_next_move(context, chat_id, mode, sequence, step):
    control, attack = sequence[step]
    if mode == "timed_fight":
        text = (
            f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
        )
    else:  # simple_fight
        text = (
            f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>"
        )
    reply_markup = answer_keyboard(send_hint=(mode == "simple_fight"))
    msg = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="HTML")
    context.user_data["last_message_id"] = msg.message_id
    if mode == "timed_fight":
        job = context.job_queue.run_repeating(
            update_timer, interval=1, first=0,
            data={
                "chat_id": chat_id,
                "message_id": msg.message_id,
                "remaining": 5,
                "current_move": (control, attack),
                "step": step,
                "timer_ended": False,
                "active": True
            }
        )
        context.user_data["current_timer"] = job
    return msg

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    if context.user_data is None:
        context.user_data = {}

    if query.data == "training_fight":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:", reply_markup=training_mode_keyboard())
    elif query.data in ["simple_fight", "timed_fight"]:
        context.user_data["fight_sequence"] = generate_fight_sequence()
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["timer_ended"] = False
        await show_next_move(context, query.message.chat_id, query.data, context.user_data["fight_sequence"], 0)
        await query.delete_message()
    elif query.data == "hint":
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")
        if mode == "simple_fight" and sequence and step is not None and query.message.message_id == current_message_id:
            control, attack = sequence[step]
            is_success, partial_success, correct_answer = check_move(control, attack, "–ê–≥–µ —É–∫–µ")
            text = (
                f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
                f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n\n"
                f"üí° –ü—Ä–∞–≤–∏–ª—å–Ω–æ: üõ° <b>{correct_answer}</b>"
            )
            await query.edit_message_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
            context.user_data["hint_count"] = context.user_data.get("hint_count", 0) + 1
    elif query.data == "pvp_bot":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º PvP: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é")
        if "current_timer" in context.user_data:
            job = context.user_data["current_timer"]
            if job and job.data.get("active", False):
                job.data["active"] = False
                try:
                    job.schedule_removal()
                    logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ PvP")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            del context.user_data["current_timer"]
        try:
            await query.edit_message_text(
                "ü•ä –ë–æ–π —Å –±–æ—Ç–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=pvp_bot_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ pvp_bot: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_keyboard())
    elif query.data == "pvp_rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–û–ï–î–ò–ù–ö–ê</b>\n‚ûñ\n"
            "–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å <b>Bot –í–∞—Å–µ–π</b> –∑–∞ –æ—á–∫–∏.\n\n"
            "<u>–°—Ö–≤–∞—Ç–∫–∞:</u>\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å</b> –∏ <b>–ê—Ç–∞–∫—É</b> (–°–°, –¢–†, –î–ó).\n"
            "- –í—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ó–∞—â–∏—Ç—É</b> (–ê–≥–µ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ, –£—á–∏ —É–∫–µ, –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π).\n\n"
            "<u>–û—á–∫–∏:</u>\n"
            "- –ö–æ–Ω—Ç—Ä–æ–ª—å: +1.\n"
            "- –ê—Ç–∞–∫–∞: +2 (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Å–ø–µ—à–µ–Ω) –∏–ª–∏ +1.\n"
            "- –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: +1 (–µ—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è).\n"
            "- –î–æ–±–∏–≤–∞–Ω–∏–µ: +2 (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏).\n\n"
            "<u>–ü–æ–±–µ–¥–∞:</u>\n"
            "- –†–∞–∑—Ä—ã–≤ –≤ 8 –æ—á–∫–æ–≤ –∏–ª–∏ 5 –º–∏–Ω—É—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_start")]]),
            parse_mode="HTML"
        )
    elif query.data == "pvp_start":
        context.user_data["pvp_mode"] = "sport"
        context.user_data["player_score"] = 0
        context.user_data["bot_score"] = 0
        context.user_data["step"] = 0
        context.user_data["player_control"] = None
        context.user_data["player_attack"] = None
        context.user_data["player_defense"] = None
        context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
        await query.edit_message_text(
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ 1\n\nüéØ –ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è</b>",
            reply_markup=pvp_attack_keyboard("control"),
            parse_mode="HTML"
        )
    elif query.data.startswith("attack_control_"):
        context.user_data["player_control"] = query.data.split("_")[2]
        step = context.user_data["step"] + 1
        await query.edit_message_text(
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}\n\nüí• –ó–∞–≤–µ—Ä—à–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n<b>2. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫–∏</b>",
            reply_markup=pvp_attack_keyboard("attack"),
            parse_mode="HTML"
        )
    elif query.data.startswith("attack_hit_"):
        context.user_data["player_attack"] = query.data.split("_")[2]
        step = context.user_data["step"] + 1
        await query.edit_message_text(
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}\n\n"
            f"–í–∞—à–∞ –∞—Ç–∞–∫–∞: <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>, <i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
            f"<b>üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É:</b>",
            reply_markup=answer_keyboard(),
            parse_mode="HTML"
        )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"] and "pvp_mode" in context.user_data:
        context.user_data["player_defense"] = query.data
        await query.edit_message_text(
            f"–í–∞—à —Ö–æ–¥\n"
            f"üëäüèª–ê—Ç–∞–∫–∞:\n"
            f"<i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> <b>{context.user_data['player_control']}</b>,\n"
            f"<i>–ê—Ç–∞–∫–∞</i> <b>{context.user_data['player_attack']}</b>\n"
            f"üõ° –ó–∞—â–∏—Ç–∞: <b>{context.user_data['player_defense']}</b>\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
            reply_markup=pvp_move_keyboard(),
            parse_mode="HTML"
        )
    elif query.data == "pvp_move":
        player_control = context.user_data["player_control"]
        player_attack = context.user_data["player_attack"]
        player_defense = context.user_data["player_defense"]
        bot_control = context.user_data["bot_control"]
        bot_attack = context.user_data["bot_attack"]
        bot_defense = random.choice(["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"])

        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        player_control_success = DEFENSE_MOVES[bot_defense]["control"] != player_control
        player_attack_success = player_attack not in DEFENSE_MOVES[bot_defense]["attack_defense"]
        bot_counter_success = not player_control_success
        bot_dobivanie_success = bot_counter_success and player_attack not in DEFENSE_MOVES[bot_defense]["counter"]

        if player_control_success:
            context.user_data["player_score"] += 1
            if player_attack_success:
                context.user_data["player_score"] += 2
        elif player_attack_success:
            context.user_data["player_score"] += 1
        if bot_counter_success:
            context.user_data["bot_score"] += 1
            if bot_dobivanie_success:
                context.user_data["bot_score"] += 2

        # –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        bot_control_success = DEFENSE_MOVES[player_defense]["control"] != bot_control
        bot_attack_success = bot_attack not in DEFENSE_MOVES[player_defense]["attack_defense"]
        player_counter_success = not bot_control_success
        player_dobivanie_success = player_counter_success and bot_attack not in DEFENSE_MOVES[player_defense]["counter"]

        if bot_control_success:
            context.user_data["bot_score"] += 1
            if bot_attack_success:
                context.user_data["bot_score"] += 2
        elif bot_attack_success:
            context.user_data["bot_score"] += 1
        if player_counter_success:
            context.user_data["player_score"] += 1
            if player_dobivanie_success:
                context.user_data["player_score"] += 2

        step = context.user_data["step"] + 1
        context.user_data["step"] = step
        log = (
            f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step}:\n"
            f"–¢–æ—Ä–∏ <b>–í—ã</b>: –ö–æ–Ω—Ç—Ä–æ–ª—å {player_control} {'—É—Å–ø–µ—Ö' if player_control_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{1 if player_control_success else 0}), "
            f"–ê—Ç–∞–∫–∞ {player_attack} {'—É—Å–ø–µ—Ö' if player_attack_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{2 if player_control_success and player_attack_success else 1 if player_attack_success else 0})\n"
            f"–£–∫–µ <b>–ë–æ—Ç</b>: –ó–∞—â–∏—Ç–∞ {bot_defense}, –ö–æ–Ω—Ç—Ä–æ–ª—å {bot_control} {'—É—Å–ø–µ—Ö' if bot_control_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{1 if bot_control_success else 0}), "
            f"–ê—Ç–∞–∫–∞ {bot_attack} {'—É—Å–ø–µ—Ö' if bot_attack_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{2 if bot_control_success and bot_attack_success else 1 if bot_attack_success else 0})\n"
            f"–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>–í—ã</b> {'—É—Å–ø–µ—Ö' if player_counter_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{1 if player_counter_success else 0}), "
            f"<b>–ë–æ—Ç</b> {'—É—Å–ø–µ—Ö' if bot_counter_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{1 if bot_counter_success else 0})\n"
            f"–î–æ–±–∏–≤–∞–Ω–∏–µ: <b>–í—ã</b> {'—É—Å–ø–µ—Ö' if player_dobivanie_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{2 if player_dobivanie_success else 0}), "
            f"<b>–ë–æ—Ç</b> {'—É—Å–ø–µ—Ö' if bot_dobivanie_success else '–Ω–µ—É—Å–ø–µ—Ö'} (+{2 if bot_dobivanie_success else 0})\n"
            f"–°—á—ë—Ç: <b>–í—ã</b> {context.user_data['player_score']} - <b>–ë–æ—Ç</b> {context.user_data['bot_score']}"
        )
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Å—Ö–≤–∞—Ç–∫–∏
        await query.message.reply_text(log, parse_mode="HTML")
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        if abs(context.user_data["player_score"] - context.user_data["bot_score"]) >= 8 or step >= 5:
            winner = "–í—ã" if context.user_data["player_score"] > context.user_data["bot_score"] else "–ë–æ—Ç" if context.user_data["bot_score"] > context.user_data["player_score"] else "–ù–∏—á—å—è"
            await query.message.reply_text(f"–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}", reply_markup=get_start_keyboard())
            context.user_data.clear()
        else:
            context.user_data["player_control"] = None
            context.user_data["player_attack"] = None
            context.user_data["player_defense"] = None
            context.user_data["bot_control"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            context.user_data["bot_attack"] = random.choice(["–°–°", "–¢–†", "–î–ó"])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
            await query.message.reply_text(
                f"‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}\n\nüéØ –ù–∞—á–Ω–∏—Ç–µ –±–æ–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è</b>",
                reply_markup=pvp_attack_keyboard("control"),
                parse_mode="HTML"
            )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"]:
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")
        if sequence and step is not None and query.message.message_id == current_message_id:
            if mode == "timed_fight" and "current_timer" in context.user_data:
                job = context.user_data["current_timer"]
                job.data["active"] = False
                try:
                    job.schedule_removal()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
                timer_ended = job.data.get("timer_ended", False)
                del context.user_data["current_timer"]
                if timer_ended:
                    await query.edit_message_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
                    return
            await query.delete_message()
            control, attack = sequence[step]
            chosen_defense = query.data
            is_success, partial_success, correct_answer = check_move(control, attack, chosen_defense)
            short_log = generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer)
            short_msg = await query.message.reply_text(short_log, parse_mode="HTML")
            detailed_log = generate_detailed_log(control, attack, chosen_defense, is_success)
            await query.message.reply_text(detailed_log, parse_mode="HTML", reply_to_message_id=short_msg.message_id)
            if is_success:
                context.user_data["correct_count"] += 1
            if control == DEFENSE_MOVES[chosen_defense]["control"]:
                context.user_data["control_count"] += 1
            if step >= len(sequence) - 1:
                await query.message.reply_text("<b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>", parse_mode="HTML")
                final_stats = generate_final_stats(
                    context.user_data["correct_count"],
                    context.user_data["control_count"],
                    context.user_data.get("hint_count", 0),
                    len(MOVES)
                )
                await query.message.reply_text(final_stats, parse_mode="HTML", reply_markup=get_start_keyboard())
                context.user_data.clear()
            else:
                context.user_data["current_step"] += 1
                await show_next_move(context, query.message.chat_id, mode, sequence, context.user_data["current_step"])
