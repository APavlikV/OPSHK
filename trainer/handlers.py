import random
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from trainer.game_logic import check_move, generate_detailed_log
from trainer.keyboards import pvp_attack_keyboard, end_fight_keyboard
from trainer.texts import TEXTS
from trainer.state import GameState
from trainer.data import MOVES, DEFENSE_MOVES

logger = logging.getLogger(__name__)

# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å /start
def get_start_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("/start")]],
        resize_keyboard=True
    )

async def start(update: Update, context: CallbackContext):
    context.user_data["state"] = GameState()
    user = update.effective_user
    username = user.username or user.first_name
    if username:
        reply_text = TEXTS["start_welcome"].format(username=username)
        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram –Ω–∏–∫", callback_data=f"use_nick_{username}"),
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫", callback_data="choose_nick")
            ]
        ])
    else:
        reply_text = TEXTS["start_no_username"]
        reply_markup = None
        context.user_data["state"].awaiting_nick = True
    message = await update.message.reply_text(
        reply_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    context.user_data["state"].last_message_id = message.message_id

async def handle_first_message(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    if not state.nickname and not state.awaiting_nick:
        await update.message.reply_text(
            "ü•ã –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )
    else:
        logger.debug("handle_first_message: user already started, ignoring")

async def setnick(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    state.awaiting_nick = True
    context.user_data["state"] = state
    await update.message.reply_text(
        TEXTS["setnick_prompt"],
        parse_mode="HTML"
    )

async def handle_nick_reply(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    logger.debug(f"handle_nick_reply: awaiting_nick={state.awaiting_nick}")
    if not state.awaiting_nick:
        logger.debug("handle_nick_reply: awaiting_nick is False, ignoring")
        return
    nick = update.message.text.strip()
    logger.info(f"User input nick: {nick}")
    if len(nick) > 20:
        await update.message.reply_text(
            TEXTS["nick_too_long"],
            parse_mode="HTML"
        )
        return
    state.nickname = nick or "–í—ã"
    state.awaiting_nick = False
    context.user_data["state"] = state
    reply_text = TEXTS["nick_set"].format(nick=state.nickname) + "\n–ì–æ—Ç–æ–≤—ã –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º?\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ:"
    message = await update.message.reply_text(
        reply_text,
        parse_mode="HTML",
        reply_markup=game_menu_keyboard()
    )
    state.last_message_id = message.message_id
    context.user_data["state"] = state

async def game(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    reply_text = TEXTS["nick_set"].format(nick=state.nickname or "–ë–æ–µ—Ü") + "\n–ì–æ—Ç–æ–≤—ã –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º?\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ:"
    message = await update.message.reply_text(
        reply_text,
        parse_mode="HTML",
        reply_markup=game_menu_keyboard()
    )
    state.last_message_id = message.message_id
    context.user_data["state"] = state

def game_menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–£—á–µ–±–Ω—ã–π –±–æ–π", callback_data="training_menu"),
            InlineKeyboardButton("–ë–æ–π —Å –ë–æ—Ç–æ–º", callback_data="pvp_menu"),
            InlineKeyboardButton("PvP –ê—Ä–µ–Ω–∞", callback_data="pvp_arena")
        ]
    ])

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    state = context.user_data.get("state", GameState())

    if data.startswith("use_nick_"):
        nickname = data.replace("use_nick_", "")
        state.nickname = nickname
        reply_text = TEXTS["nick_set"].format(nick=nickname) + "\n–ì–æ—Ç–æ–≤—ã –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º?\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ:"
        await query.message.edit_text(
            reply_text,
            parse_mode="HTML",
            reply_markup=game_menu_keyboard()
        )
        state.last_message_id = query.message.message_id
    elif data == "choose_nick":
        state.awaiting_nick = True
        await query.message.edit_text(
            TEXTS["choose_own_nick"],
            parse_mode="HTML",
            reply_markup=None
        )
    elif data == "training_menu":
        reply_text = "ü•ä –£—á–µ–±–Ω—ã–π –±–æ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await query.message.edit_text(
            reply_text,
            parse_mode="HTML",
            reply_markup=training_menu_keyboard()
        )
        state.last_message_id = query.message.message_id
    elif data == "pvp_menu":
        await query.message.edit_text(
            TEXTS["pvp_bot_menu"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_fight"),
                    InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="pvp_rules")
                ]
            ])
        )
        state.last_message_id = query.message.message_id
    elif data == "pvp_arena":
        await query.message.edit_text(
            "üèü PvP –ê—Ä–µ–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –°–∫–æ—Ä–æ —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        state.last_message_id = query.message.message_id
    elif data == "training_memo":
        await query.message.edit_text(
            TEXTS["training_memo"],
            parse_mode="HTML",
            reply_markup=training_menu_keyboard(exclude="training_memo")
        )
        state.last_message_id = query.message.message_id
    elif data == "training_rules":
        await query.message.edit_text(
            TEXTS["training_rules"],
            parse_mode="HTML",
            reply_markup=training_menu_keyboard(exclude="training_rules")
        )
        state.last_message_id = query.message.message_id
    elif data == "pvp_rules":
        await query.message.edit_text(
            TEXTS["pvp_rules"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–π", callback_data="pvp_fight"),
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="pvp_menu")
                ]
            ])
        )
        state.last_message_id = query.message.message_id
    elif data == "simple_fight":
        await start_simple_fight(update, context)
    elif data == "timed_fight":
        await query.message.edit_text(
            "‚è± –ë–æ–π –Ω–∞ –≤—Ä–µ–º—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="training_menu")]
            ])
        )
        state.last_message_id = query.message.message_id
    elif data == "back_to_training":
        await query.message.edit_text(
            "ü•ä –£—á–µ–±–Ω—ã–π –±–æ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=training_menu_keyboard()
        )
        state.last_message_id = query.message.message_id
    elif data == "back_to_menu":
        reply_text = TEXTS["nick_set"].format(nick=state.nickname or "–ë–æ–µ—Ü") + "\n–ì–æ—Ç–æ–≤—ã –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º?\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ:"
        await query.message.edit_text(
            reply_text,
            parse_mode="HTML",
            reply_markup=game_menu_keyboard()
        )
        state.last_message_id = query.message.message_id
    elif data == "pvp_fight":
        state.mode = "pvp"
        state.step = 1
        await query.message.edit_text(
            TEXTS["pvp_start"].format(step=state.step),
            parse_mode="HTML",
            reply_markup=pvp_attack_keyboard("control")
        )
        state.last_message_id = query.message.message_id
    elif data.startswith("defense_"):
        await simple_fight_defense(update, context)
    elif data.startswith("attack_"):
        await pvp_fight_attack(update, context)
    elif data == "last_stats":
        await last_stats(update, context)
    elif data == "hint":
        control, attack = state.fight_sequence[state.current_step]
        correct_defenses = [d for d, v in DEFENSE_MOVES.items() if control in v.get("control", []) and attack in v.get("attack", [])]
        hint_text = f"\n\nüí° <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞</i>: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî <b>{', '.join(correct_defenses) if correct_defenses else '–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞—â–∏—Ç—ã'}</b>"
        task_text = (
            f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {state.current_step + 1} –∏–∑ 10</u>\n\n"
            f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
            f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>{hint_text}"
        )
        state.hint_count += 1
        await context.bot.edit_message_text(
            text=task_text,
            chat_id=query.message.chat_id,
            message_id=state.last_fight_message_id,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–ê–≥–µ —É–∫–µ", callback_data="defense_–ê–≥–µ —É–∫–µ"),
                    InlineKeyboardButton("–°–æ—Ç–æ —É–∫–µ", callback_data="defense_–°–æ—Ç–æ —É–∫–µ")
                ],
                [
                    InlineKeyboardButton("–£—á–∏ —É–∫–µ", callback_data="defense_–£—á–∏ —É–∫–µ"),
                    InlineKeyboardButton("–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", callback_data="defense_–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π")
                ],
                [
                    InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")
                ]
            ])
        )
    context.user_data["state"] = state

def training_menu_keyboard(exclude=None):
    buttons = [
        [
            InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ–π –±–æ–π", callback_data="simple_fight"),
            InlineKeyboardButton("–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è", callback_data="timed_fight")
        ],
        [
            InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="training_rules"),
            InlineKeyboardButton("–ü–∞–º—è—Ç–∫–∞", callback_data="training_memo")
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    if exclude == "training_rules":
        buttons[1] = [InlineKeyboardButton("–ü–∞–º—è—Ç–∫–∞", callback_data="training_memo")]
    elif exclude == "training_memo":
        buttons[1] = [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="training_rules")]
    return InlineKeyboardMarkup(buttons)

async def start_simple_fight(update: Update, context: CallbackContext):
    query = update.callback_query
    state = context.user_data.get("state", GameState())
    state.mode = "simple"
    state.fight_sequence = random.sample(MOVES, 10)
    state.current_step = 0
    state.correct_count = 0
    state.control_count = 0
    state.missed_attacks = 0
    state.hint_count = 0
    context.user_data["state"] = state
    nickname = state.nickname or "–ë–æ–µ—Ü"
    await query.message.edit_text(
        f"‚öîÔ∏è <b>{nickname}</b>, –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π! ‚öîÔ∏è",
        parse_mode="HTML",
        reply_markup=None
    )
    state.last_message_id = query.message.message_id
    context.user_data["state"] = state
    await show_move(update, context)

async def show_move(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    if state.current_step >= len(state.fight_sequence):
        return
    control, attack = state.fight_sequence[state.current_step]
    reply_text = (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {state.current_step + 1} –∏–∑ 10</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>"
    )
    reply_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ê–≥–µ —É–∫–µ", callback_data="defense_–ê–≥–µ —É–∫–µ"),
            InlineKeyboardButton("–°–æ—Ç–æ —É–∫–µ", callback_data="defense_–°–æ—Ç–æ —É–∫–µ")
        ],
        [
            InlineKeyboardButton("–£—á–∏ —É–∫–µ", callback_data="defense_–£—á–∏ —É–∫–µ"),
            InlineKeyboardButton("–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", callback_data="defense_–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π")
        ],
        [
            InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")
        ]
    ])
    message = await update.callback_query.message.reply_text(
        reply_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    state.last_fight_message_id = message.message_id
    context.user_data["state"] = state

async def simple_fight_defense(update: Update, context: CallbackContext):
    query = update.callback_query
    state = context.user_data.get("state", GameState())
    chosen_defense = query.data.replace("defense_", "")
    control, attack = state.fight_sequence[state.current_step]
    
    logger.debug(f"simple_fight_defense: control={control}, attack={attack}, chosen_defense={chosen_defense}")
    
    is_success, partial_success, correct_defenses = check_move(control, attack, chosen_defense)
    
    if is_success:
        state.correct_count += 1
        state.control_count += 1
    elif control in DEFENSE_MOVES.get(chosen_defense, {}).get("control", []):
        state.control_count += 1
    else:
        state.missed_attacks += 1
    
    nickname = state.nickname or "–ë–æ–µ—Ü"
    log = generate_detailed_log(control, attack, chosen_defense, is_success, nickname)
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º, –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    task_text = (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {state.current_step + 1} –∏–∑ 10</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i>: <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞</i>: <b>{attack}</b>\n"
        f"üõ°Ô∏è <i>–í–∞—à–∞ –∑–∞—â–∏—Ç–∞</i>: <b>{chosen_defense}</b>\n\n"
    )
    result_text = "‚úÖ <b>–£–°–ü–ï–•</b>" if is_success else (
        f"‚ùå <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>\n<i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ</i>: <b>{', '.join(correct_defenses) if correct_defenses else '–Ω–µ—Ç –∑–∞—â–∏—Ç—ã'}</b>"
    )
    await context.bot.edit_message_text(
        text=task_text + result_text,
        chat_id=query.message.chat_id,
        message_id=state.last_fight_message_id,
        parse_mode="HTML",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Å—Ö–≤–∞—Ç–∫–∏
    await query.message.reply_text(
        log,
        parse_mode="HTML"
    )
    
    state.current_step += 1
    context.user_data["state"] = state
    
    if state.current_step >= 10:
        # –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω
        await query.message.reply_text(
            "<b>üèÅ –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>",
            parse_mode="HTML"
        )
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_message = (
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n\n"
            f"‚úÖ <i>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π</i>: <b>{state.correct_count}</b>\n"
            f"üí° <i>–° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π</i>: <b>{state.hint_count}</b>\n"
            f"üõ°Ô∏è <i>–û—Ç–±–∏—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ–π</i>: <b>{state.control_count}</b>\n"
            f"‚ùå <i>–ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—Ç–∞–∫</i>: <b>{state.missed_attacks}</b>"
        )
        await query.message.reply_text(
            stats_message,
            parse_mode="HTML"
        )
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reply_text = TEXTS["nick_set"].format(nick=nickname) + "\n–ì–æ—Ç–æ–≤—ã –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º?\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ:"
        message = await query.message.reply_text(
            reply_text,
            parse_mode="HTML",
            reply_markup=game_menu_keyboard()
        )
        state.last_message_id = message.message_id
        state.last_fight_stats = {
            "correct_count": state.correct_count,
            "control_count": state.control_count,
            "missed_attacks": state.missed_attacks,
            "hint_count": state.hint_count
        }
        context.user_data["state"] = state
        return
    
    await show_move(update, context)

async def last_stats(update: Update, context: CallbackContext):
    state = context.user_data.get("state", GameState())
    stats = state.last_fight_stats
    nickname = state.nickname or "–ë–æ–µ—Ü"
    if stats:
        message = (
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n\n"
            f"‚úÖ <i>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π</i>: <b>{stats['correct_count']}</b>\n"
            f"üí° <i>–° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π</i>: <b>{stats['hint_count']}</b>\n"
            f"üõ°Ô∏è <i>–û—Ç–±–∏—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ–π</i>: <b>{stats['control_count']}</b>\n"
            f"‚ùå <i>–ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—Ç–∞–∫</i>: <b>{stats['missed_attacks']}</b>"
        )
    else:
        message = "üìä –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    await update.callback_query.message.reply_text(
        message,
        parse_mode="HTML"
    )

async def pvp_fight_attack(update: Update, context: CallbackContext):
    query = update.callback_query
    state = context.user_data.get("state", GameState())
    data = query.data
    
    if data.startswith("attack_control_"):
        state.player_control = data.replace("attack_control_", "")
        logger.info(f"PvP: control set to {state.player_control}")
        reply_markup = pvp_attack_keyboard("attack", state.player_control)
        await query.message.edit_text(
            TEXTS["pvp_attack"].format(step=state.step),
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        state.last_message_id = query.message.message_id
    context.user_data["state"] = state
