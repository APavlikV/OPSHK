import random

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ–¥—ã –∏ –∑–∞—â–∏—Ç—ã (–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
DEFENSE_MOVES = {
    "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π": {"control": ["–î–ó", "–°–°", "–¢–†"], "attack_defense": ["–ì–î–ù"], "counter": ["–¢–†", "–°–°"]},
    "–£—á–∏ —É–∫–µ": {"control": ["–°–°", "–¢–†"], "attack_defense": ["–°–°", "–¢–†"], "counter": ["–î–ó"]},
    "–°–æ—Ç–æ —É–∫–µ": {"control": ["–¢–†"], "attack_defense": ["–¢–†", "–°–°"], "counter": ["–ì–î–ù"]},
    "–ê–≥–µ —É–∫–µ": {"control": ["–î–ó"], "attack_defense": ["–î–ó"], "counter": ["–°–°"]}
}

# –§—Ä–∞–∑—ã
CONTROL_PHRASES = {
    "–î–ó": ["–º–µ—Ç–∏—Ç –≤ –≥–æ–ª–æ–≤—É", "—Ü–µ–ª–∏—Ç—Å—è –≤ –Ω–æ—Å", "—Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤–æ–ª–æ—Å—ã", "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ä–¥–∞–∫", "–∏–¥—ë—Ç –∑–∞ –º–æ–∑–≥–∞–º–∏"],
    "–°–°": ["–º–µ—Ç–∏—Ç –≤ –ø–µ—á–µ–Ω—å", "—Ü–µ–ª–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä", "–∏–¥—ë—Ç –∑–∞ —Å–µ–ª–µ–∑—ë–Ω–∫–æ–π", "—Ö–æ—á–µ—Ç –ø—Ä–æ–±–∏—Ç—å –ø—É–∑–æ", "–Ω–∞—Ü–µ–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—Ç–ª–µ—Ç–Ω–∏—Ü—É"],
    "–¢–†": ["–º–µ—Ç–∏—Ç –≤ —Ç—Ä–∞—Ö–µ—é", "—Ö–∏—Ç—Ä–æ —Ü–µ–ª–∏—Ç—Å—è –≤ –≥—Ä—É–¥—å", "–ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∑–∞ –≥—Ä—É–¥–∫–∏", "–∏–¥—ë—Ç –∑–∞ —Å–µ—Ä–¥—Ü–µ–º", "—Ü–µ–ª–∏—Ç—Å—è –≤ —Ä—ë–±—Ä–∞"]
}
ATTACK_PHRASES = {
    "–î–ó": ["–±—å—ë—Ç –≤ –Ω–æ—Å", "–∞—Ç–∞–∫—É–µ—Ç —á–µ–ª—é—Å—Ç—å", "–Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É", "–∑–∞–ª–µ–ø–∏–ª –≤ –Ω–æ—Å", "–ø—Ä–æ–±–∏–ª —á–µ—Ä–¥–∞–∫", "–Ω–∞—Å—Ç—É—á–∞–ª –ø–æ –º–∞–∫—É—à–∫–µ", "–≤–º–∞–∑–∞–ª –ø–æ –º–æ–∑–≥–∞–º"],
    "–°–°": ["–±—å—ë—Ç –≤ –ø–µ—á–µ–Ω—å", "–∞—Ç–∞–∫—É–µ—Ç —Å–µ–ª–µ–∑—ë–Ω–∫—É", "–∏–¥—ë—Ç –≤ —Ü–µ–Ω—Ç—Ä", "–≤–º–∞–∑–∞–ª –ø–æ –∫–∏—à–∫–∞–º", "–∑–∞–ª–µ–ø–∏–ª –ø–æ –∫–æ—Ç–ª–µ—Ç–Ω–∏—Ü–µ", "–ø—Ä–æ–ø–∏—Å–∞–ª –ø–æ –ø—É–∑–∏–∫—É", "–¥–∞–ª –ø–æ –∂–∏–≤–æ—Ç–Ω–æ–º—É –æ—Ç—Å–µ–∫—É"],
    "–¢–†": ["–±—å—ë—Ç –≤ —Ç—Ä–∞—Ö–µ—é", "–∞—Ç–∞–∫—É–µ—Ç –≥—Ä—É–¥—å", "—Ü–µ–ª–∏—Ç –≤ —Å–µ—Ä–¥—Ü–µ", "–∑–∞—Ä—è–¥–∏–ª –≤ –≥—Ä—É–¥—å", "–ø—Ä–æ–±–∏–ª –ø–æ –≥—Ä—É–¥–∏–Ω–µ", "–¥–∞–ª –ø–æ —Å–µ—Ä–¥—Ü—É"],
    "–ì–î–ù": ["–±—å—ë—Ç –ø–æ –±—É–±–µ–Ω—á–∏–∫–∞–º", "–∞—Ç–∞–∫—É–µ—Ç –∂–∏–≤–æ—Ç", "–ª–æ–º–∞–µ—Ç –Ω–æ–≥–∏", "–∑–∞—Ä—è–¥–∏–ª –ø–æ —Å–µ–º–µ–π–Ω—ã–º –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—è–º", "–ø—Ä–æ–ø–∏—Å–∞–ª –ø–æ –∑–æ–Ω–µ 18+", "–≤—Ä–µ–∑–∞–ª –ø–æ –Ω–∏–∂–Ω–µ–º—É —ç—Ç–∞–∂—É", "–¥–∞–ª –ø–æ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"]
}
DEFENSE_PHRASES = {
    "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π": ["—Å—Ç–∞–≤–∏—Ç –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", "–æ—Ñ–æ—Ä–º–ª—è–µ—Ç –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", "–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", "–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π", "–±—å—ë—Ç –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"],
    "–£—á–∏ —É–∫–µ": ["–≤–∫—Ä—É—á–∏–≤–∞–µ—Ç –£—á–∏ —É–∫–µ", "—Å—Ç–∞–≤–∏—Ç –£—á–∏ —É–∫–µ", "–ª–æ–≤–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –£—á–∏ —É–∫–µ", "–≤–µ—Ä—Ç–∏—Ç –£—á–∏ —É–∫–µ", "–¥–µ—Ä–∂–∏—Ç –£—á–∏ —É–∫–µ"],
    "–°–æ—Ç–æ —É–∫–µ": ["—Å—Ç–∞–≤–∏—Ç –°–æ—Ç–æ —É–∫–µ", "—Å–æ–æ–±—Ä–∞–∂–∞–µ—Ç –°–æ—Ç–æ —É–∫–µ", "—Ç–≤—ë—Ä–¥–æ –¥–µ—Ä–∂–∏—Ç –°–æ—Ç–æ —É–∫–µ", "–±–ª–æ–∫–∏—Ä—É–µ—Ç –°–æ—Ç–æ —É–∫–µ", "–≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –°–æ—Ç–æ —É–∫–µ"],
    "–ê–≥–µ —É–∫–µ": ["–ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ê–≥–µ —É–∫–µ", "–∑–∞–ø–µ—á–∞—Ç–ª–µ–µ—Ç –ê–≥–µ —É–∫–µ", "–≤—ã–ø–∏—Å—ã–≤–∞–µ—Ç –ê–≥–µ —É–∫–µ", "–≤–∑–ª–µ—Ç–∞–µ—Ç —Å –ê–≥–µ —É–∫–µ", "—à–≤—ã—Ä—è–µ—Ç –ê–≥–µ —É–∫–µ"]
}
SUCCESS_PHRASES = ["–£–†–ê! –ü–æ–±–µ–¥–∞!", "–ö–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–Ω—Ç!", "–¢—ã —á–µ–º–ø–∏–æ–Ω!", "–°—É–ø–µ—Ä!"]
COUNTER_PHRASES = ["–±—å—ë—Ç –≤ –æ—Ç–≤–µ—Ç –≤", "–Ω–∞–Ω–æ—Å–∏—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –≤", "–∑–∞–≤–µ—Ä—à–∞–µ—Ç —É–¥–∞—Ä–æ–º –≤"]
FAIL_PHRASES = ["–û–ô! –ú–∏–º–æ!", "–ê–ô! –ù–µ –≤—ã—à–ª–æ...", "–£–ü–°! –ü—Ä–æ–º–∞—Ö!"]
BOT_WIN_PHRASES = ["–¥–æ–±–∏–≤–∞–µ—Ç –≤", "–ø–æ–±–µ–∂–¥–∞–µ—Ç —É–¥–∞—Ä–æ–º –≤", "–∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤"]

def check_move(control, attack, chosen_defense):
    if chosen_defense not in DEFENSE_MOVES:
        return False, False, []
    defense_data = DEFENSE_MOVES[chosen_defense]
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])
    is_success = control_success and attack_success
    partial_success = control_success != attack_success
    correct_defenses = [
        move for move, data in DEFENSE_MOVES.items()
        if control in data.get("control", []) and attack in data.get("attack_defense", [])
    ]
    return is_success, partial_success, correct_defenses

def generate_detailed_log(control, attack, chosen_defense, is_success, nickname="–ù–∏–∫"):
    defense_data = DEFENSE_MOVES.get(chosen_defense, {})
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])
    
    log = f"‚öîÔ∏è –¢–æ—Ä–∏ –ë–æ—Ç –í–∞—Å—è {random.choice(CONTROL_PHRASES.get(control, ['–∞—Ç–∞–∫—É–µ—Ç']))} {'‚úÖ' if control_success else '‚ùå'}, "
    log += f"{random.choice(ATTACK_PHRASES.get(attack, ['–±—å—ë—Ç']))} {'‚úÖ' if attack_success else '‚ùå'}\n"
    
    log += f"üõ°Ô∏è –£–∫–µ {nickname} {random.choice(DEFENSE_PHRASES.get(chosen_defense, ['–±–ª–æ–∫–∏—Ä—É–µ—Ç']))}! "
    if is_success:
        counter_zone = random.choice(defense_data.get("counter", ["–î–ó"]))
        log += f"‚úÖ\nüí• –í–ñ–£–•! {nickname} {random.choice(COUNTER_PHRASES)} {counter_zone}! {random.choice(SUCCESS_PHRASES)}"
    else:
        if control_success:
            log += f"–î–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å! ‚úÖ "
        else:
            log += f"–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç... ‚ùå "
        if attack_success:
            log += f"–ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ\n"
        else:
            log += f"–ê—Ç–∞–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç... ‚ùå\n"
            log += f"üòì {random.choice(FAIL_PHRASES)} "
        counter_zone = random.choice(["–î–ó", "–°–°", "–¢–†", "–ì–î–ù"])
        log += f"üòà –ö–†–ê–•! –ë–æ—Ç –í–∞—Å—è {random.choice(BOT_WIN_PHRASES)} {counter_zone}! "
        
        correct_defenses = [
            move for move, data in DEFENSE_MOVES.items()
            if control in data.get("control", []) and attack in data.get("attack_defense", [])
        ]
        if correct_defenses:
            log += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫: {random.choice(correct_defenses)}."

    return log
