import random
from data import MOVES, DEFENSE_MOVES

def generate_fight_sequence():
    return random.sample(MOVES, len(MOVES))

def check_move(control, attack, chosen_defense):
    correct_answer = None
    for defense, info in DEFENSE_MOVES.items():
        if info["control"] == control and attack in info["attack_defense"]:
            correct_answer = defense
            break
    if not correct_answer:
        correct_answer = random.choice(list(DEFENSE_MOVES.keys()))
    is_success = chosen_defense == correct_answer
    partial_success = DEFENSE_MOVES[chosen_defense]["control"] == control
    return is_success, partial_success, correct_answer

def generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer):
    status = "‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞!" if is_success else "üü° –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞" if partial_success else "‚ùå –ù–µ—Ç –∑–∞—â–∏—Ç—ã"
    return (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
        f"üõ°Ô∏è <i>–í–∞—à–∞ –∑–∞—â–∏—Ç–∞:</i> <b>{chosen_defense}</b>\n\n"
        f"{status}\n"
        f"<i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</i> <b>{correct_answer}</b>"
    )

def generate_detailed_log(control, attack, chosen_defense, is_success):
    return (
        f"<i>–î–µ—Ç–∞–ª–∏:</i>\n"
        f"- <b>{chosen_defense}</b> –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∞—Ç–∞–∫: {', '.join(DEFENSE_MOVES[chosen_defense]['attack_defense'])}\n"
        f"- –ö–æ–Ω—Ç—Ä–æ–ª—å: {DEFENSE_MOVES[chosen_defense]['control']}"
    )

def generate_final_stats(correct_count, control_count, hint_count, total_moves):
    return (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
        f"- –ü–æ–ª–Ω—ã—Ö –∑–∞—â–∏—Ç: {correct_count}/{total_moves}\n"
        f"- –ö–æ–Ω—Ç—Ä–æ–ª–µ–π: {control_count}/{total_moves}\n"
        f"- –ü–æ–¥—Å–∫–∞–∑–æ–∫: {hint_count}"
    )
