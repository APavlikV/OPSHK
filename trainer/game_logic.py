import random
from trainer.data import DEFENSE_MOVES, CONTROL_PHRASES, ATTACK_PHRASES, DEFENSE_PHRASES

SUCCESS_PHRASES = ["–£–†–ê! –ü–æ–±–µ–¥–∞!", "–ö–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–Ω—Ç!", "–¢—ã —á–µ–º–ø–∏–æ–Ω!", "–°—É–ø–µ—Ä!"]
COUNTER_PHRASES = ["–±—å—ë—Ç –≤ –æ—Ç–≤–µ—Ç –≤", "–Ω–∞–Ω–æ—Å–∏—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –≤", "–∑–∞–≤–µ—Ä—à–∞–µ—Ç —É–¥–∞—Ä–æ–º –≤"]
FAIL_PHRASES = ["–û–ô! –ú–∏–º–æ!", "–ê–ô! –ù–µ –≤—ã—à–ª–æ...", "–£–ü–°! –ü—Ä–æ–º–∞—Ö!"]
BOT_WIN_PHRASES = ["–¥–æ–±–∏–≤–∞–µ—Ç –≤", "–ø–æ–±–µ–∂–¥–∞–µ—Ç —É–¥–∞—Ä–æ–º –≤", "–∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤"]

def check_move(control, attack, chosen_defense):
    if chosen_defense not in DEFENSE_MOVES:
        return False, False, []
    defense_data = DEFENSE_MOVES[chosen_defense]
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])
    is_success = control_success and attack_success
    partial_success = control_success != attack_success
    correct_defenses = [
        move for move, data in DEFENSE_MOVES.items()
        if control in data.get("control", []) and attack in data.get("attack_defense", [])
    ]
    return is_success, partial_success, correct_defenses

def generate_detailed_log(control, attack, chosen_defense, is_success, nickname="–ù–∏–∫"):
    defense_data = DEFENSE_MOVES.get(chosen_defense, {})
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])
    
    log = f"‚öîÔ∏è –¢–æ—Ä–∏ –ë–æ—Ç –í–∞—Å—è {random.choice(CONTROL_PHRASES.get(control, ['–∞—Ç–∞–∫—É–µ—Ç']))} {'‚úÖ' if control_success else '‚ùå'}, "
    log += f"{random.choice(ATTACK_PHRASES.get(attack, ['–±—å—ë—Ç']))} {'‚úÖ' if attack_success else '‚ùå'}\n"
    
    log += f"üõ°Ô∏è –£–∫–µ {nickname} {random.choice(DEFENSE_PHRASES.get(chosen_defense, ['–±–ª–æ–∫–∏—Ä—É–µ—Ç']))}! "
    if is_success:
        counter_zone = random.choice(defense_data.get("counter", ["–î–ó"]))
        log += f"‚úÖ\nüí• –í–ñ–£–•! {nickname} {random.choice(COUNTER_PHRASES)} {counter_zone}! {random.choice(SUCCESS_PHRASES)}"
    else:
        if control_success:
            log += f"–î–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å! ‚úÖ "
        else:
            log += f"–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç... ‚ùå "
        if attack_success:
            log += f"–ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ\n"
        else:
            log += f"–ê—Ç–∞–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç... ‚ùå\n"
            log += f"üòì {random.choice(FAIL_PHRASES)} "
        counter_zone = random.choice(["–î–ó", "–°–°", "–¢–†", "–ì–î–ù"])
        log += f"üòà –ö–†–ê–•! –ë–æ—Ç –í–∞—Å—è {random.choice(BOT_WIN_PHRASES)} {counter_zone}! "
        
        correct_defenses = [
            move for move, data in DEFENSE_MOVES.items()
            if control in data.get("control", []) and attack in data.get("attack_defense", [])
        ]
        if correct_defenses:
            log += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫: {random.choice(correct_defenses)}."

    return log
