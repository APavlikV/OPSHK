import random
from data import MOVES, DEFENSE_MOVES, ATTACK_PHRASES, DEFENSE_PHRASES

def generate_fight_sequence():
    return random.sample(MOVES, len(MOVES))

def check_move(control, attack, chosen_defense):
    defense = DEFENSE_MOVES[chosen_defense]
    control_blocked = control == defense["control"]
    attack_blocked = attack in defense["attack_defense"]
    
    is_success = control_blocked and attack_blocked
    partial_success = control_blocked != attack_blocked
    
    correct_answer = next(
        (move for move, data in DEFENSE_MOVES.items() if control == data["control"] and attack in data["attack_defense"]),
        chosen_defense
    )
    
    return is_success, partial_success, correct_answer

def generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer):
    result = "‚úÖ –£–°–ü–ï–•" if is_success else "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•" if partial_success else "‚ùå –ü–û–†–ê–ñ–ï–ù–ò–ï"
    text = (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
        f"üõ° <i>–í–∞—à–∞ –∑–∞—â–∏—Ç–∞:</i> <b>{chosen_defense}</b>\n\n"
        f"<b>{result}</b>"
    )
    if not is_success:
        text += f"\nüí° <i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</i> <b>{correct_answer}</b>"
    return text

def generate_detailed_log(control, attack, chosen_defense, is_success):
    defense = DEFENSE_MOVES[chosen_defense]
    control_blocked = control == defense["control"]
    attack_blocked = attack in defense["attack_defense"]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ ATTACK_PHRASES –∏ DEFENSE_PHRASES
    control_phrase = random.choice(
        ATTACK_PHRASES["control_success"][control] if control_blocked else ATTACK_PHRASES["control_fail"][control]
    )
    attack_phrase = random.choice(
        ATTACK_PHRASES["attack_success"][attack] if attack_blocked else ATTACK_PHRASES["attack_fail"][attack]
    )
    defense_phrase = random.choice(
        DEFENSE_PHRASES["defense_success"][control] if control_blocked else DEFENSE_PHRASES["defense_fail"][control]
    )
    counter_phrase = random.choice(
        DEFENSE_PHRASES["counter_success"][chosen_defense] if is_success else DEFENSE_PHRASES["counter_fail"][chosen_defense]
    )
    
    text = (
        f"<b>–î–µ—Ç–∞–ª–∏:</b>\n"
        f"ü•∏ <b>Bot –í–∞—Å—è</b> {control_phrase} {attack_phrase}\n"
        f"{defense_phrase}\n"
        f"{counter_phrase}"
    )
    
    return text

def generate_final_stats(correct_count, control_count, hint_count, total_moves):
    accuracy = (correct_count / total_moves) * 100 if total_moves > 0 else 0
    control_accuracy = (control_count / total_moves) * 100 if total_moves > 0 else 0
    
    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
        f"‚úÖ <i>–ü–æ–ª–Ω—ã–µ —É—Å–ø–µ—Ö–∏:</i> <b>{correct_count}/{total_moves}</b> ({accuracy:.1f}%)\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç—Ä–∞–∂—ë–Ω:</i> <b>{control_count}/{total_moves}</b> ({control_accuracy:.1f}%)\n"
        f"üí° <i>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</i> <b>{hint_count}</b>"
    )
    
    if accuracy >= 80:
        text += f"\n\nüèÜ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–∞—Å—Ç–µ—Ä!</b>"
    elif accuracy >= 50:
        text += f"\n\nü•ã <b>–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!</b>"
    else:
        text += f"\n\nüí™ <b>–ù–µ —Å–¥–∞–≤–∞–π—Å—è, –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–µ–ª–∞–µ—Ç –º–∞—Å—Ç–µ—Ä–∞!</b>"
    
    return text
