import random
from data import MOVES, DEFENSE_MOVES

def generate_fight_sequence():
    return random.sample(MOVES, len(MOVES))

def check_move(control, attack, chosen_defense):
    control_blocked = control == DEFENSE_MOVES[chosen_defense]["control"]
    attack_blocked = attack in DEFENSE_MOVES[chosen_defense]["attack_defense"]
    
    is_success = control_blocked and attack_blocked
    partial_success = control_blocked != attack_blocked
    
    correct_answer = None
    for defense, params in DEFENSE_MOVES.items():
        if control == params["control"] and attack in params["attack_defense"]:
            correct_answer = defense
            break
    
    return is_success, partial_success, correct_answer

def generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer):
    result = "<b>–£–°–ü–ï–•</b> ‚úÖ" if is_success else "<b>–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•</b> ‚ö†Ô∏è" if partial_success else "<b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b> ‚ùå"
    text = (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
        f"üõ° <i>–ó–∞—â–∏—Ç–∞:</i> <b>{chosen_defense}</b>\n\n"
        f"{result}"
    )
    if correct_answer and not is_success:
        text += f"\nüí° <i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</i> <b>{correct_answer}</b>"
    return text

def generate_detailed_log(control, attack, chosen_defense, is_success):
    control_blocked = control == DEFENSE_MOVES[chosen_defense]["control"]
    attack_blocked = attack in DEFENSE_MOVES[chosen_defense]["attack_defense"]
    
    control_result = "‚úÖ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–±–∏—Ç!</b>" if control_blocked else "‚ùå <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ –æ—Ç–±–∏—Ç!</b>"
    attack_result = "‚úÖ <b>–ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!</b>" if attack_blocked else "‚ùå <b>–ê—Ç–∞–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞!</b>"
    
    text = (
        f"<u>üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:</u>\n"
        f"{control_result}\n"
        f"{attack_result}"
    )
    if is_success:
        text += "\n\nüéâ <b>–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!</b> –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞!"
    return text

def generate_final_stats(correct_count, control_count, hint_count, total_moves):
    correct_percent = (correct_count / total_moves) * 100
    control_percent = (control_count / total_moves) * 100
    
    text = (
        f"<b>üèÜ –ò—Ç–æ–≥–∏ –±–æ—è:</b>\n"
        f"‚ûñ\n"
        f"ü•ã <b>–ü–æ–ª–Ω—ã—Ö –ø–æ–±–µ–¥:</b> {correct_count} –∏–∑ {total_moves} ({correct_percent:.0f}%)\n"
        f"üéØ <b>–ö–æ–Ω—Ç—Ä–æ–ª–µ–π –æ—Ç–±–∏—Ç–æ:</b> {control_count} –∏–∑ {total_moves} ({control_percent:.0f}%)\n"
        f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {hint_count}"
    )
    return text
