import random
from data import MOVES, DEFENSE_MOVES, ATTACK_PHRASES, DEFENSE_PHRASES
from texts import TEXTS

def generate_fight_sequence():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –±–æ—è."""
    if not MOVES:
        raise ValueError("MOVES is empty")
    return random.sample(MOVES, len(MOVES))

def check_move(control, attack, chosen_defense):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å–ø–µ—à–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞—Ç–∞–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_success, partial_success, correct_answer).
    """
    if chosen_defense not in DEFENSE_MOVES:
        return False, False, None
    defense_data = DEFENSE_MOVES[chosen_defense]
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])
    is_success = control_success and attack_success
    partial_success = control_success != attack_success

    correct_answer = next(
        (
            move
            for move, data in DEFENSE_MOVES.items()
            if control in data.get("control", []) and attack in data.get("attack_defense", [])
        ),
        None,
    )

    return is_success, partial_success, correct_answer

def generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ª–æ–≥ —Å—Ö–≤–∞—Ç–∫–∏."""
    result = "‚úÖ –ß–ò–°–¢–ê–Ø –ü–û–ë–ï–î–ê" if is_success else "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•" if partial_success else "‚ùå –ü–û–†–ê–ñ–ï–ù–ò–ï"
    log = (
        f"<u>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</u>\n\n"
        f"üéØ <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> <b>{control}</b>\n"
        f"üí• <i>–ê—Ç–∞–∫–∞:</i> <b>{attack}</b>\n"
        f"üõ°Ô∏è <i>–ó–∞—â–∏—Ç–∞:</i> <b>{chosen_defense}</b>\n\n"
        f"<b>{result}</b>"
    )
    if not is_success:
        log += f"\n<i>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</i> üõ° <b>{correct_answer or '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}</b>"
    return log

def generate_detailed_log(control, attack, chosen_defense, is_success):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å—Ö–≤–∞—Ç–∫–∏."""
    defense_data = DEFENSE_MOVES.get(chosen_defense, {})
    control_success = control in defense_data.get("control", [])
    attack_success = attack in defense_data.get("attack_defense", [])

    attack_phrase = random.choice(ATTACK_PHRASES.get(attack, ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ç–∞–∫–∞"]))
    defense_phrase = random.choice(DEFENSE_PHRASES.get(chosen_defense, ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞"]))

    log = f"{attack_phrase}\n"
    log += f"üõ°Ô∏è –í—ã: {defense_phrase}\n"

    if is_success:
        counter_zone = random.choice(defense_data.get("counter", ["–î–ó"]))
        log += f"‚úÖ <b>–ß–ò–°–¢–ê–Ø –ü–û–ë–ï–î–ê:</b> –ü–æ–ª–Ω—ã–π –±–ª–æ–∫! –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –≤ <b>{counter_zone}</b>!"
    else:
        if control_success:
            log += "‚úÖ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–±–∏—Ç!</b> "
        else:
            log += "‚ùå <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—à—ë–ª!</b> "
        if attack_success:
            log += "–ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! "
        else:
            log += "–ê—Ç–∞–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏! "
        counter_zone = random.choice(["–ì–î–ù", "–°–°", "–¢–†", "–î–ó"])
        log += f"–î–æ–±–∏–≤–∞–Ω–∏–µ –≤ <b>{counter_zone}</b>."

    return log

def generate_final_stats(correct_count, control_count, hint_count, total_steps):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –±–æ—è."""
    stats = f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
    stats += f"‚úÖ –ß–∏—Å—Ç—ã—Ö –ø–æ–±–µ–¥: <b>{correct_count}</b> –∏–∑ {total_steps}\n"
    stats += f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª–µ–π –æ—Ç–±–∏—Ç–æ: <b>{control_count}</b> –∏–∑ {total_steps}\n"
    stats += f"üí° –ü–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{hint_count}</b>\n"
    return stats

def calculate_pvp_scores(player_control, player_attack, player_defense, bot_control, bot_attack, bot_defense):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ –¥–ª—è PvP —Å—Ö–≤–∞—Ç–∫–∏."""
    player_score_delta = 0
    bot_score_delta = 0

    # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
    player_control_success = player_control not in DEFENSE_MOVES.get(bot_defense, {}).get("control", [])
    player_attack_success = player_attack not in DEFENSE_MOVES.get(bot_defense, {}).get("attack_defense", [])
    bot_control_defense_success = not player_control_success
    bot_attack_defense_success = not player_attack_success
    bot_dobivanie = bot_control_defense_success and bot_attack_defense_success

    if player_control_success:
        player_score_delta += 1
    if player_attack_success:
        player_score_delta += (2 if player_control_success else 1)
    if bot_control_defense_success:
        bot_score_delta += 1
    if bot_dobivanie:
        bot_score_delta += 2
    elif bot_attack_defense_success:
        bot_score_delta += 1

    # –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
    bot_control_success = bot_control not in DEFENSE_MOVES.get(player_defense, {}).get("control", [])
    bot_attack_success = bot_attack not in DEFENSE_MOVES.get(player_defense, {}).get("attack_defense", [])
    player_control_defense_success = not bot_control_success
    player_attack_defense_success = not bot_attack_success
    player_dobivanie = player_control_defense_success and player_attack_defense_success

    if bot_control_success:
        bot_score_delta += 1
    if bot_attack_success:
        bot_score_delta += (2 if bot_control_success else 1)
    if player_control_defense_success:
        player_score_delta += 1
    if player_dobivanie:
        player_score_delta += 2
    elif player_attack_defense_success:
        player_score_delta += 1

    return player_score_delta, bot_score_delta

def generate_pvp_log(step, player_name, player_control, player_attack, player_defense, bot_control, bot_attack, bot_defense, player_score, bot_score):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥ PvP —Å—Ö–≤–∞—Ç–∫–∏."""
    player_control_success = player_control not in DEFENSE_MOVES.get(bot_defense, {}).get("control", [])
    player_attack_success = player_attack not in DEFENSE_MOVES.get(bot_defense, {}).get("attack_defense", [])
    bot_control_defense_success = not player_control_success
    bot_attack_defense_success = not player_attack_success
    bot_dobivanie = bot_control_defense_success and bot_attack_defense_success

    bot_control_success = bot_control not in DEFENSE_MOVES.get(player_defense, {}).get("control", [])
    bot_attack_success = bot_attack not in DEFENSE_MOVES.get(player_defense, {}).get("attack_defense", [])
    player_control_defense_success = not bot_control_success
    player_attack_defense_success = not bot_attack_success
    player_dobivanie = player_control_defense_success and player_attack_defense_success

    return TEXTS["pvp_log_template"].format(
        step=step,
        player_name=player_name,
        player_control=player_control,
        player_control_result="‚úÖ" if player_control_success else "‚ùå",
        player_control_points=1 if player_control_success else 0,
        player_attack=player_attack,
        player_attack_result="‚úÖ" if player_attack_success else "‚ùå",
        player_attack_points=2 if player_control_success and player_attack_success else 1 if player_attack_success else 0,
        bot_defense=bot_defense,
        bot_control_defense_result="‚úÖ" if bot_control_defense_success else "‚ùå",
        bot_control_defense_points=1 if bot_control_defense_success else 0,
        bot_dobivanie_result="‚úÖ" if bot_dobivanie else "‚ùå",
        bot_dobivanie_points=2 if bot_dobivanie else 1 if bot_attack_defense_success else 0,
        bot_control=bot_control,
        bot_control_result="‚úÖ" if bot_control_success else "‚ùå",
        bot_control_points=1 if bot_control_success else 0,
        bot_attack=bot_attack,
        bot_attack_result="‚úÖ" if bot_attack_success else "‚ùå",
        bot_attack_points=2 if bot_control_success and bot_attack_success else 1 if bot_attack_success else 0,
        player_defense=player_defense,
        player_control_defense_result="‚úÖ" if player_control_defense_success else "‚ùå",
        player_control_defense_points=1 if player_control_defense_success else 0,
        player_dobivanie_result="‚úÖ" if player_dobivanie else "‚ùå",
        player_dobivanie_points=2 if player_dobivanie else 1 if player_attack_defense_success else 0,
        player_score=player_score,
        bot_score=bot_score
    )
