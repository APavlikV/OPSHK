import random
from data import MOVES, DEFENSE_MOVES, ATTACK_PHRASES, DEFENSE_PHRASES

def generate_fight_sequence():
    sequence = MOVES.copy()
    random.shuffle(sequence)
    return sequence

def check_move(control, attack, chosen_defense):
    defense_data = DEFENSE_MOVES.get(chosen_defense, {})
    control_success = control == defense_data.get("control")
    attack_success = attack in defense_data.get("attack_defense", [])
    is_success = control_success and attack_success
    partial_success = not control_success and attack_success
    correct_answer = next((move for move, data in DEFENSE_MOVES.items() if control == data["control"] and attack in data["attack_defense"]), None)
    return is_success, partial_success, correct_answer

def generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer):
    result_emoji = "üü¢" if is_success else "üü†" if partial_success else "üî¥"
    return (
        f"<code>‚öîÔ∏è –°—Ö–≤–∞—Ç–∫–∞ {step + 1}</code>\n\n"
        f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
        f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
        f"–ó–∞—â–∏—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: <b>{chosen_defense}</b>\n"
        f"{result_emoji} <b>{'–£–°–ü–ï–•' if is_success else '–ü–û–†–ê–ñ–ï–ù–ò–ï'}</b>"
        + (f" (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answer})" if not is_success and correct_answer else "")
    )

def generate_detailed_log(control, attack, chosen_defense, is_success):
    attacker_control_success = random.choice([True, False])
    attacker_attack_success = random.choice([True, False])
    defense_data = DEFENSE_MOVES.get(chosen_defense, {})
    counter_zone = random.choice(defense_data.get("counter", ["–î–ó"])) if is_success else random.choice(["–ì–î–ù", "–°–°", "–¢–†", "–î–ó"])
    
    attacker_name = "<b>Bot –í–∞—Å—è</b>"
    attack_text = f"{attacker_name} {'—è—Ä–æ—Å—Ç–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª' if attacker_attack_success else '–Ω–µ–¥–æ–ª–≥–æ –¥—É–º–∞—è —Ä–∏–Ω—É–ª—Å—è –≤ –∞—Ç–∞–∫—É'}: " \
                  f"<i>{random.choice(ATTACK_PHRASES['control_success' if attacker_control_success else 'control_fail'][control])}</i> " \
                  f"<i>{random.choice(ATTACK_PHRASES['attack_success' if attacker_attack_success else 'attack_fail'][attack])}</i> ‚öîÔ∏è "
    defense_text = f"{random.choice(DEFENSE_PHRASES['defense_success' if control == defense_data.get('control') else 'defense_fail'][control if control == defense_data.get('control') else random.choice(list(DEFENSE_PHRASES['defense_fail'].keys()))])} " \
                   f"{random.choice(DEFENSE_PHRASES['counter_success' if is_success else 'counter_fail'][chosen_defense])}"
    return f"{attack_text}{defense_text}"

def generate_final_stats(correct_count, control_count, hint_count, total):
    return (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n\n"
        f"‚úÖ <code>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π</code>: <b>{correct_count}</b>\n"
        f"üí° <code>–° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π</code>: <b>{hint_count}</b>\n"
        f"üõ°Ô∏è <code>–û—Ç–±–∏—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ–π</code>: <b>{control_count}</b>\n"
        f"‚ùå <code>–ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—Ç–∞–∫</code>: <b>{total - correct_count}</b>"
    )

def check_round(control, attack, defense):
    from data import MOVES, DEFENSE_MOVES
    result = {
        "control_success": False,
        "attack_success": False,
        "defense_control_success": False,
        "counter_success": False,
        "defense_attack_success": False
    }
    if (control, attack) in MOVES:
        result["control_success"] = True
        result["attack_success"] = True
    defense_data = DEFENSE_MOVES.get(defense, {})
    if defense_data.get("control") == control:
        result["defense_control_success"] = True
    if attack in defense_data.get("counter", []):
        result["counter_success"] = True
    if attack in defense_data.get("attack_defense", []):
        result["defense_attack_success"] = True
    return result

def get_hint(control, attack):
    correct_defense = next(
        (move for move, data in DEFENSE_MOVES.items() if control == data["control"] and attack in data["attack_defense"]),
        "–ê–≥–µ —É–∫–µ"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    )
    return f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—â–∏—Ç—É: {correct_defense}"
