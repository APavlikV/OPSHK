from aiogram import types, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from logic import process_combat_turn, get_available_blocks

router = Router()

# --- –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start ---
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ò–≥—Ä–∞")]],
    resize_keyboard=True
)

# --- –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è "–ò–≥—Ä–∞" ---
game_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
    [InlineKeyboardButton(text="–ü–∞–º—è—Ç–∫–∞", callback_data="memo")],
    [InlineKeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="training")],
    [InlineKeyboardButton(text="–ê—Ä–µ–Ω–∞", callback_data="arena")]
])

# --- –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" ---
training_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–π –±–æ–π", callback_data="simple_fight")],
    [InlineKeyboardButton(text="–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è", callback_data="timed_fight")]
])

# --- –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±–ª–æ–∫–æ–≤ ---
def block_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=block, callback_data=f"block:{block}")] for block in get_available_blocks()
    ])

# --- –ò–°–•–û–î–ù–´–ï –¢–ï–ö–°–¢–´ ---
RULES_TEXT = (
    "üìå –ü–†–ê–í–ò–õ–ê\n"
    "1. –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –≤ –æ–¥–Ω—É –∏–∑ –∑–æ–Ω: –°–°, –¢–†, –î–ó, –ì–î–ù.\n"
    "2. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –±–ª–æ–∫. –£ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —Å–≤–æ—è –∑–æ–Ω–∞ –∑–∞—â–∏—Ç—ã.\n"
    "3. –ï—Å–ª–∏ –±–ª–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏ –¥–æ–±–∏—Ç—å.\n"
    "4. –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø–æ–ª—É—á–∞–µ—Ç–µ —É—Ä–æ–Ω.\n"
    "–ó–∞–¥–∞—á–∞: –≤—ã—Å—Ç–æ—è—Ç—å –∏ –ø–æ–±–µ–¥–∏—Ç—å!"
)

MEMO_TEXT = (
    "üß† –ü–ê–ú–Ø–¢–ö–ê\n"
    "‚ûñ\n"
    "üëäüèª –ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞—Ç–∞–∫–∏:\n"
    "‚Ä¢ –°–° ‚Äî –ß—É–¥–∞–Ω (—Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ)\n"
    "‚Ä¢ –¢–† ‚Äî –ß—É–¥–∞–Ω (—Ç—Ä–∞—Ö–µ—è)\n"
    "‚Ä¢ –î–ó ‚Äî –î–∑–µ–¥–∞–Ω (–≥–æ–ª–æ–≤–∞)\n"
    "‚Ä¢ –ì–î–ù ‚Äî –ì–æ–¥–∞–Ω (–Ω–∏–∂–µ –ø–æ—è—Å–∞)\n\n"
    "üõ°Ô∏è –ë–ª–æ–∫–∏:\n"
    "‚ñ´Ô∏è –ê–≥–µ —É–∫–µ\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –°–°\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –¢–†\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó\n\n"
    "‚ñ´Ô∏è –£—á–∏ —É–∫–µ\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –°–°\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –¢–†\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó / –¢–† / –°–°\n\n"
    "‚ñ´Ô∏è –°–æ—Ç–æ —É–∫–µ\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –¢–†\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –°–°\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó / –¢–† / –°–°\n\n"
    "‚ñ´Ô∏è –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –î–ó\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –¢–† / –°–°\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –¢–† / –°–° / –ì–î–ù"
)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=start_keyboard)

@router.message(F.text == "–ò–≥—Ä–∞")
async def game_menu_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=game_menu_keyboard)

@router.callback_query(F.data == "rules")
async def rules_handler(callback: CallbackQuery):
    await callback.message.edit_text(RULES_TEXT)

@router.callback_query(F.data == "memo")
async def memo_handler(callback: CallbackQuery):
    await callback.message.edit_text(MEMO_TEXT)

@router.callback_query(F.data == "training")
async def training_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=training_keyboard)

@router.callback_query(F.data == "arena")
async def arena_handler(callback: CallbackQuery):
    await callback.message.edit_text("‚ö†Ô∏è –ê—Ä–µ–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ!")

# --- –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –±–æ—è ---
@router.callback_query(F.data == "simple_fight")
async def simple_fight_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –±–ª–æ–∫:", reply_markup=block_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ ---
@router.callback_query(F.data.startswith("block:"))
async def block_choice_handler(callback: CallbackQuery):
    block = callback.data.split(":")[1]
    result = process_combat_turn(block)
    await callback.message.edit_text(result, reply_markup=block_keyboard())
