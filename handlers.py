from telegram.ext import ContextTypes
from telegram import Update
from keyboards import start_keyboard, menu_keyboard, training_mode_keyboard, answer_keyboard
from game_logic import generate_fight_sequence, check_move, generate_short_log, generate_detailed_log, generate_final_stats
from data import MOVES, DEFENSE_MOVES
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text("ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!\n–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b> –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!",
    parse_mode="HTML",
    reply_markup=start_keyboard())

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=menu_keyboard())

async def update_timer(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    remaining = job.data["remaining"] - 1
    job.data["remaining"] = remaining

    if not job.data.get("is_active", True):
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω

    try:
        control, attack = job.data["current_move"]
        step = job.data["step"]
        text = (
            f"<code>‚öîÔ∏è –®–∞–≥ {step} –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
        )

        if remaining > 0:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=answer_keyboard(), parse_mode="HTML")
        else:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
            job.data["is_active"] = False
            job.schedule_removal()
            context.user_data["timer_ended"] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_timer: {e}", exc_info=True)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    if query.data == "rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –ò–ì–†–´</b>\n‚ûñ\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä! –ó–¥–µ—Å—å –≤—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º <b>Bot –í–∞—Å–µ–π</b>. "
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∞—Ç–∞–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å.\n\n"
            "<u>–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –ø–æ–µ–¥–∏–Ω–æ–∫:</u>\n"
            "1. <b>–®–∞–≥ –±–æ—è</b>: –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> (–≥–¥–µ –æ–Ω –≤–∞—Å –¥–µ—Ä–∂–∏—Ç) –∏ <i>–ê—Ç–∞–∫—É</i> (–∫—É–¥–∞ –±—å—ë—Ç).\n"
            "2. <b>–í–∞—à —Ö–æ–¥</b>: –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –±–ª–æ–∫–æ–≤: –ê–≥–µ —É–∫–µ, –£—á–∏ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ –∏–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π.\n"
            "3. <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>:\n"
            "   - üü¢ <b>–£–°–ü–ï–•</b>: –µ—Å–ª–∏ –±–ª–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∞—Ç–∞–∫—É.\n"
            "   - üü† <b>–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•</b>: –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ –æ—Ç–±–∏—Ç, –Ω–æ –∞—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.\n"
            "   - üî¥ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>: –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–ª–∏ –∞—Ç–∞–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "4. <b>–õ–æ–≥ –±–æ—è</b>: –ü–æ—Å–ª–µ —Ö–æ–¥–∞ ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
            "<u>–†–µ–∂–∏–º—ã:</u>\n"
            "- <b>–ü—Ä–æ—Å—Ç–æ–π –±–æ–π</b>: –ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞, —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.\n"
            "- <b>–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è</b>: 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.\n\n"
            "<u>–¶–µ–ª—å:</u>\n"
            "–ü—Ä–æ–π—Ç–∏ 9 —à–∞–≥–æ–≤, –Ω–∞–±—Ä–∞–≤ –º–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤.",
            parse_mode="HTML"
        )
    elif query.data == "memo":
        await query.edit_message_text(
    "<b>üß† –ü–ê–ú–Ø–¢–ö–ê</b>\n‚ûñ\n"
    "<u>üëäüèª –ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞—Ç–∞–∫–∏:</u>\n"
    "‚Ä¢ <b>–°–°</b> ‚Äî –ß—É–¥–∞–Ω (—Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ)\n"
    "‚Ä¢ <b>–¢–†</b> ‚Äî –ß—É–¥–∞–Ω (—Ç—Ä–∞—Ö–µ—è)\n"
    "‚Ä¢ <b>–î–ó</b> ‚Äî –î–∑–µ–¥–∞–Ω (–≥–æ–ª–æ–≤–∞)\n"
    "‚Ä¢ <b>–ì–î–ù</b> ‚Äî –ì–æ–¥–∞–Ω (–Ω–∏–∂–µ –ø–æ—è—Å–∞)\n\n"
    "<u>üõ°Ô∏è –ë–ª–æ–∫–∏:</u>\n"
    "‚ñ´Ô∏è <b>–ê–≥–µ —É–∫–µ</b>\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –°–°\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –¢–†\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó\n\n"
    "‚ñ´Ô∏è <b>–£—á–∏ —É–∫–µ</b>\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –°–°\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –¢–†\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó / –¢–† / –°–°\n\n"
    "‚ñ´Ô∏è <b>–°–æ—Ç–æ —É–∫–µ</b>\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –¢–†\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –î–ó / –°–°\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –î–ó / –¢–† / –°–°\n\n"
    "‚ñ´Ô∏è <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>\n"
    "   ‚Ä¢ –ó–∞—â–∏—Ç–∞: –î–ó\n"
    "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: –¢–† / –°–°\n"
    "   ‚Ä¢ –î–æ–±–∏–≤–∞–Ω–∏–µ: –¢–† / –°–° / –ì–î–ù",
    parse_mode="HTML"
)

    elif query.data == "karate_arena":
        await query.edit_message_text("–ê—Ä–µ–Ω–∞: –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif query.data == "training_fight":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:", reply_markup=training_mode_keyboard())
    elif query.data in ["simple_fight", "timed_fight"]:
        context.user_data["fight_sequence"] = generate_fight_sequence()
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["timer_ended"] = False

        control, attack = context.user_data["fight_sequence"][0]
        text = (
            f"<code>‚öîÔ∏è –®–∞–≥ 1 –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>"
        )
        if query.data == "timed_fight":
            text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
            msg = await query.message.reply_text(text, reply_markup=answer_keyboard(), parse_mode="HTML")
            job = context.job_queue.run_repeating(
                update_timer,
                interval=1,
                first=0,
                data={
                    "chat_id": query.message.chat_id,
                    "message_id": msg.message_id,
                    "remaining": 5,
                    "current_move": (control, attack),
                    "step": 1,
                    "is_active": True
                }
            )
            context.user_data["current_timer"] = job
        else:
            msg = await query.message.reply_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
        context.user_data["last_message_id"] = msg.message_id
        try:
            await query.delete_message()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    elif query.data == "hint" and context.user_data.get("mode") == "simple_fight":
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        if sequence and step is not None:
            control, attack = sequence[step]
            _, _, correct_answer = check_move(control, attack, "")
            context.user_data["hint_count"] += 1
            await query.edit_message_text(
                f"<code>‚öîÔ∏è –®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
                f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
                f"<b><i>üõ°Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫: {correct_answer}</i></b>",
                reply_markup=answer_keyboard(send_hint=True),
                parse_mode="HTML"
            )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"]:
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")

        if sequence and step is not None and query.message.message_id == current_message_id:
            if context.user_data.get("timer_ended", False):
                await query.message.reply_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if mode == "timed_fight" and "current_timer" in context.user_data:
                job = context.user_data["current_timer"]
                job.data["is_active"] = False
                job.schedule_removal()
                logger.info(f"Stopped timer {job.id}")
                del context.user_data["current_timer"]

            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.delete_message()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
            control, attack = sequence[step]
            chosen_defense = query.data
            is_success, partial_success, correct_answer = check_move(control, attack, chosen_defense)
            
            short_log = generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer)
            short_msg = await query.message.reply_text(short_log, parse_mode="HTML")
            
            detailed_log = generate_detailed_log(control, attack, chosen_defense, is_success)
            await query.message.reply_text(detailed_log, parse_mode="HTML", reply_to_message_id=short_msg.message_id)
            
            if is_success:
                context.user_data["correct_count"] += 1
            if control == DEFENSE_MOVES[chosen_defense]["control"]:
                context.user_data["control_count"] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–µ–Ω –ª–∏ –±–æ–π
            if step >= len(sequence) - 1:
                await query.message.reply_text("<b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>", parse_mode="HTML")
                final_stats = generate_final_stats(
                    context.user_data["correct_count"],
                    context.user_data["control_count"],
                    context.user_data.get("hint_count", 0),
                    len(MOVES)
                )
                await query.message.reply_text(final_stats, parse_mode="HTML")
                logger.info("–ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
            else:
                step += 1
                context.user_data["current_step"] = step
                control, attack = sequence[step]
                text = (
                    f"<code>‚öîÔ∏è –®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
                    f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                    f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>"
                )
                if mode == "timed_fight":
                    text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
                    msg = await query.message.reply_text(text, reply_markup=answer_keyboard(), parse_mode="HTML")
                    job = context.job_queue.run_repeating(
                        update_timer,
                        interval=1,
                        first=0,
                        data={
                            "chat_id": query.message.chat_id,
                            "message_id": msg.message_id,
                            "remaining": 5,
                            "current_move": (control, attack),
                            "step": step + 1,
                            "is_active": True
                        }
                    )
                    context.user_data["current_timer"] = job
                else:
                    msg = await query.message.reply_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
                context.user_data["last_message_id"] = msg.message_id
        else:
            logger.info(f"–ö–ª–∏–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É {step} –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—é {current_message_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
