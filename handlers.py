from telegram.ext import ContextTypes
from telegram import Update
from keyboards import start_keyboard, menu_keyboard, training_mode_keyboard, answer_keyboard
from game_logic import generate_fight_sequence, check_move, generate_short_log, generate_detailed_log, generate_final_stats
from data import MOVES, DEFENSE_MOVES
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text("ü•ã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç—Ä–µ–Ω–∞–∂–µ—Ä!\n–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å <b>ü•∏ Bot –í–∞—Å–µ–π</b> –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!",
    parse_mode="HTML",
    reply_markup=start_keyboard())

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞'")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=menu_keyboard())

async def update_timer(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    message_id = job.data["message_id"]
    remaining = job.data["remaining"] - 1
    job.data["remaining"] = remaining

    if not job.data.get("is_step_active", False):
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —à–∞–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
    if "current_timer" not in context.user_data or context.user_data["current_timer"] != job:
        logger.info(f"Job {job.id} is outdated, skipping execution")
        return

    try:
        control, attack = job.data["current_move"]
        text = (
            f"<code>‚öîÔ∏è –®–∞–≥ {job.data['step']} –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
        )

        timer_end_time = job.data.get("timer_end_time")
        answer_time = job.data.get("answer_time")
        current_time = datetime.utcnow()

        if remaining > 0 and (not answer_time or answer_time > timer_end_time):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=answer_keyboard(), parse_mode="HTML")
        elif remaining <= 0 and (not answer_time or timer_end_time < answer_time):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
            job.data["is_step_active"] = False
            job.schedule_removal()
            job.data["timer_ended"] = True
            context.user_data["timer_ended"] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_timer: {e}", exc_info=True)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    if query.data == "rules":
        await query.edit_message_text(
            "<b>–ü–†–ê–í–ò–õ–ê –ò–ì–†–´</b>\n‚ûñ\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ê–†–ê–¢–≠ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä! –ó–¥–µ—Å—å –≤—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º <b>Bot –í–∞—Å–µ–π</b>. "
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∞—Ç–∞–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å.\n\n"
            "<u>–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –ø–æ–µ–¥–∏–Ω–æ–∫:</u>\n"
            "1. <b>–®–∞–≥ –±–æ—è</b>: –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç <i>–ö–æ–Ω—Ç—Ä–æ–ª—å</i> (–≥–¥–µ –æ–Ω –≤–∞—Å –¥–µ—Ä–∂–∏—Ç) –∏ <i>–ê—Ç–∞–∫—É</i> (–∫—É–¥–∞ –±—å—ë—Ç). –ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ç—Ä–æ–ª—å: –°–°, –ê—Ç–∞–∫–∞: –î–ó.\n"
            "2. <b>–í–∞—à —Ö–æ–¥</b>: –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –±–ª–æ–∫–æ–≤: –ê–≥–µ —É–∫–µ, –£—á–∏ —É–∫–µ, –°–æ—Ç–æ —É–∫–µ –∏–ª–∏ –ì–µ–¥–∞–Ω –±–∞—Ä–∞–π.\n"
            "3. <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>:\n"
            "   - üü¢ <b>–£–°–ü–ï–•</b>: –µ—Å–ª–∏ –≤–∞—à –±–ª–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç –∑–æ–Ω—É –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É (—Å–º. –ü–∞–º—è—Ç–∫—É).\n"
            "   - üü† <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>: –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ –æ—Ç–±–∏—Ç, –Ω–æ –∞—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –≤—ã —É—Å—Ç–æ—è–ª–∏, –Ω–æ –Ω–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª–∏.\n"
            "   - üî¥ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>: –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–ª–∏ –∞—Ç–∞–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n"
            "4. <b>–õ–æ–≥ –±–æ—è</b>: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ä–∞—Å—Å–∫–∞–∑ –æ –±–æ–µ.\n\n"
            "<u>–†–µ–∂–∏–º—ã –∏–≥—Ä—ã:</u>\n"
            "- <b>–ü—Ä–æ—Å—Ç–æ–π –±–æ–π</b>: –û—Ç–±–∏–≤–∞–π—Ç–µ –∞—Ç–∞–∫–∏ –±–µ–∑ —Å–ø–µ—à–∫–∏, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É.\n"
            "- <b>–ë–æ–π –Ω–∞ –≤—Ä–µ–º—è</b>: –£ –≤–∞—Å 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥ ‚Äî —É—Å–ø–µ–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª–æ–∫!\n\n"
            "<u>–¶–µ–ª—å:</u>\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ (9 –∞—Ç–∞–∫) –∏ –Ω–∞–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ–π –≤—ã –æ—Ç–±–∏–ª–∏ –∏ –∞—Ç–∞–∫ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏.\n\n"
            "–£–¥–∞—á–∏ –≤ –±–æ—é, –∫–∞—Ä–∞—Ç–∏—Å—Ç!",
            parse_mode="HTML"
        )
    elif query.data == "memo":
        await query.edit_message_text(
            "<b>–ü–ê–ú–Ø–¢–ö–ê</b>\n‚ûñ\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–ê–†–ê–¢–≠</b> —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –∑–æ–Ω–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ –±–æ—é:\n\n"
            "<u>–ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞—Ç–∞–∫–∏:</u>\n"
            "- <b>–°–°</b> ‚Äî <i>–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ</i>: —Ü–µ–Ω—Ç—Ä —Ç–µ–ª–∞, —É—è–∑–≤–∏–º–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —É–¥–∞—Ä–æ–≤ –≤ –∂–∏–≤–æ—Ç –∏–ª–∏ –≥—Ä—É–¥—å.\n"
            "- <b>–¢–†</b> ‚Äî <i>–¢—Ä–∞—Ö–µ—è</i>: –æ–±–ª–∞—Å—Ç—å —à–µ–∏ –∏ –≥–æ—Ä–ª–∞, —É–¥–∞—Ä—ã —Å—é–¥–∞ –Ω–∞—Ä—É—à–∞—é—Ç –¥—ã—Ö–∞–Ω–∏–µ.\n"
            "- <b>–î–ó</b> ‚Äî <i>–î–∞–Ω—Ç–æ (–≥–æ–ª–æ–≤–∞)</i>: –∑–æ–Ω–∞ –≥–æ–ª–æ–≤—ã, –≤–∫–ª—é—á–∞—è –ª–∏—Ü–æ –∏ –≤–∏—Å–∫–∏.\n"
            "- <b>–ì–î–ù</b> ‚Äî <i>–ì–µ–¥–∞–Ω (–Ω–∏–∂–µ –ø–æ—è—Å–∞)</i>: –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Ç–µ–ª–∞, –Ω–æ–≥–∏ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ –ø–æ—è—Å–æ–º.\n\n"
            "<u>–ó–∞—â–∏—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞:</u>\n"
            "- <b>–ê–≥–µ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –°–°, –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç –≤ –î–ó –∏–ª–∏ –¢–†.\n"
            "- <b>–£—á–∏ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –°–°, –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç –≤ –î–ó –∏–ª–∏ –¢–†.\n"
            "- <b>–°–æ—Ç–æ —É–∫–µ</b>: –∑–∞—â–∏—â–∞–µ—Ç –¢–†, –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç –≤ –î–ó –∏–ª–∏ –°–°.\n"
            "- <b>–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π</b>: –∑–∞—â–∏—â–∞–µ—Ç –î–ó, –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç –≤ –¢–† –∏–ª–∏ –°–°.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫ –∏ –ø–æ–±–µ–¥–∏—Ç—å!\n\n"
            "<b>P.S.</b> –ù—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∞ –∏–º–µ–Ω–Ω–æ:\n"
            "<b>–í–æ-–ø–µ—Ä–≤—ã—Ö</b>: –í—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∞–≥–µ, —Å–æ—Ç–æ, —É—á–∏ –∏ –≥–µ–¥–∞–Ω) –º–æ–∂–Ω–æ —É—Å–ª–æ–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏.\n"
            "<b>1)</b> –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
            "<b>2)</b> –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞\n"
            "<b>3)</b> –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –¥–æ–±–∏–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç—Ä–æ–ª—è)\n\n"
            "<b>–ù–∞–ø—Ä–∏–º–µ—Ä</b>: –ê–≥–µ —É–∫–µ\n"
            "<b>1)</b> –ó–∞—â–∏—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–ø–ª–µ—Ç–µ–Ω–∏—è (–°–°)\n"
            "<b>2)</b> –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –≤ –≥—Ä—É–¥—å, —Ç–∞–∫ –∏ –≤ –≥–æ–ª–æ–≤—É (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –î–ó –∏–ª–∏ –¢–†)\n"
            "<b>3)</b> –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ê–≥–µ —É–∫–µ ‚Äî —ç—Ç–æ –¥–æ–±–∏–≤–∞–Ω–∏–µ –≤ –≥–æ–ª–æ–≤—É –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã (–¢–† –∏–ª–∏ –î–ó)\n\n"
            "–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫ —Ç–∞–∫–∂–µ –º–Ω–æ–≥–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã, –∏ –ø–æ–ª–µ–∑–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ê–≥–µ —É–∫–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –î–ó: –≤–æ–∑–º–æ–∂–µ–Ω –∏ —É—Ä–æ–≤–µ–Ω—å –¢–†.\n\n"
            "–≠—Ç–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –Ω–∞ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Å–µ–±—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, —á—Ç–æ –∏–∑—É—á–∞–µ–º–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–∞–ª–µ–∫–æ –Ω–µ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞ –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤ —Å–≤–æ–µ–π –≥–æ–ª–æ–≤–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø.\n\n"
            "<b>–í–æ-–≤—Ç–æ—Ä—ã—Ö</b>: –∫–∞–∫ —É–∂–µ –ø–æ–Ω—è—Ç–Ω–æ, –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –≤—ã—à–µ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–∏–∫, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n"
            "<b>–ï—â—ë —Ä–∞–∑</b> ‚òùüèª –ö–∞–∂–¥–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∞–≥–µ, —Å–æ—Ç–æ, —É—á–∏ –∏ –≥–µ–¥–∞–Ω) —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π:\n"
            "<b>1)</b> –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
            "<b>2)</b> –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞\n"
            "<b>3)</b> –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –¥–æ–±–∏–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç—Ä–æ–ª—è)\n\n",
            parse_mode="HTML"
        )
    elif query.data == "karate_arena":
        await query.edit_message_text("–ê—Ä–µ–Ω–∞: –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif query.data == "training_fight":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—è:", reply_markup=training_mode_keyboard())
    elif query.data in ["simple_fight", "timed_fight"]:
        context.user_data["fight_sequence"] = generate_fight_sequence()
        context.user_data["current_step"] = 0
        context.user_data["correct_count"] = 0
        context.user_data["control_count"] = 0
        context.user_data["hint_count"] = 0
        context.user_data["mode"] = query.data
        context.user_data["last_message_id"] = None
        context.user_data["step_processed"] = False
        context.user_data["timer_ended"] = False
        if "current_timer" in context.user_data:
            del context.user_data["current_timer"]

        control, attack = context.user_data["fight_sequence"][0]
        text = (
            f"<code>‚öîÔ∏è –®–∞–≥ 1 –∏–∑ {len(MOVES)}</code>\n\n"
            f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
            f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>"
        )
        if query.data == "timed_fight":
            text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
            msg = await query.message.reply_text(text, reply_markup=answer_keyboard(), parse_mode="HTML")
            start_time = datetime.utcnow()
            timer_end_time = start_time + timedelta(seconds=5)
            job = context.job_queue.run_repeating(
                update_timer,
                interval=1,
                first=0,
                data={
                    "chat_id": query.message.chat_id,
                    "message_id": msg.message_id,
                    "remaining": 5,
                    "current_move": (control, attack),
                    "step": 1,
                    "is_step_active": True,
                    "timer_end_time": timer_end_time,
                    "answer_time": None,
                    "timer_ended": False
                }
            )
            context.user_data["current_timer"] = job
        else:
            msg = await query.message.reply_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
        context.user_data["last_message_id"] = msg.message_id
        try:
            await query.delete_message()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    elif query.data == "hint" and context.user_data.get("mode") == "simple_fight":
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        if sequence and step is not None:
            control, attack = sequence[step]
            _, _, correct_answer = check_move(control, attack, "")
            context.user_data["hint_count"] += 1
            await query.edit_message_text(
                f"<code>‚öîÔ∏è –®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
                f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>\n"
                f"<b><i>üõ°Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫: {correct_answer}</i></b>",
                reply_markup=answer_keyboard(send_hint=True),
                parse_mode="HTML"
            )
    elif query.data in ["–ê–≥–µ —É–∫–µ", "–°–æ—Ç–æ —É–∫–µ", "–£—á–∏ —É–∫–µ", "–ì–µ–¥–∞–Ω –±–∞—Ä–∞–π"]:
        sequence = context.user_data.get("fight_sequence")
        step = context.user_data.get("current_step")
        mode = context.user_data.get("mode")
        current_message_id = context.user_data.get("last_message_id")
        
        if sequence and step is not None and query.message.message_id == current_message_id:
            if context.user_data.get("step_processed", False):
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–∞ —à–∞–≥–µ {step}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                return
            
            context.user_data["step_processed"] = True
            answer_time = datetime.utcnow()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ç–∞–π–º–µ—Ä —Ä–∞–Ω—å—à–µ
            if mode == "timed_fight" and context.user_data.get("timer_ended", False):
                await query.message.reply_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", parse_mode="HTML")
                try:
                    await query.delete_message()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                return
            
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            processing_msg = await query.message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ö–æ–¥–∞...", parse_mode="HTML")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if mode == "timed_fight" and "current_timer" in context.user_data:
                current_job = context.user_data["current_timer"]
                if current_job in context.job_queue.jobs():
                    current_job.data["is_step_active"] = False
                    current_job.data["answer_time"] = answer_time
                    current_job.schedule_removal()  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
                    logger.info(f"Removed job {current_job.id} before processing next step")
                del context.user_data["current_timer"]
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.delete_message()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —à–∞–≥ {step + 1}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
            if step >= len(sequence) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                await query.message.reply_text("<b>–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!</b>", parse_mode="HTML")
                final_stats = generate_final_stats(
                    context.user_data["correct_count"],
                    context.user_data["control_count"],
                    context.user_data.get("hint_count", 0),
                    len(MOVES)
                )
                await query.message.reply_text(final_stats, parse_mode="HTML")
                logger.info("–ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
                context.user_data["step_processed"] = False
            else:
                control, attack = sequence[step]
                chosen_defense = query.data
                is_success, partial_success, correct_answer = check_move(control, attack, chosen_defense)
                
                short_log = generate_short_log(step, control, attack, chosen_defense, is_success, partial_success, correct_answer)
                short_msg = await query.message.reply_text(short_log, parse_mode="HTML")
                
                detailed_log = generate_detailed_log(control, attack, chosen_defense, is_success)
                await query.message.reply_text(detailed_log, parse_mode="HTML", reply_to_message_id=short_msg.message_id)
                
                if is_success:
                    context.user_data["correct_count"] += 1
                if control == DEFENSE_MOVES[chosen_defense]["control"]:
                    context.user_data["control_count"] += 1
                
                step += 1
                context.user_data["current_step"] = step
                
                control, attack = sequence[step]
                text = (
                    f"<code>‚öîÔ∏è –®–∞–≥ {step + 1} –∏–∑ {len(MOVES)}</code>\n\n"
                    f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å: <b>{control}</b>\n"
                    f"üí• –ê—Ç–∞–∫–∞: <b>{attack}</b>"
                )
                
                if mode == "timed_fight":
                    text += "\n–û—Å—Ç–∞–ª–æ—Å—å: 5 —Å–µ–∫"
                    msg = await query.message.reply_text(text, reply_markup=answer_keyboard(), parse_mode="HTML")
                    start_time = datetime.utcnow()
                    timer_end_time = start_time + timedelta(seconds=5)
                    job = context.job_queue.run_repeating(
                        update_timer,
                        interval=1,
                        first=0,
                        data={
                            "chat_id": query.message.chat_id,
                            "message_id": msg.message_id,
                            "remaining": 5,
                            "current_move": (control, attack),
                            "step": step + 1,
                            "is_step_active": True,
                            "timer_end_time": timer_end_time,
                            "answer_time": None,
                            "timer_ended": False
                        }
                    )
                    context.user_data["current_timer"] = job
                else:
                    msg = await query.message.reply_text(text, reply_markup=answer_keyboard(send_hint=True), parse_mode="HTML")
                context.user_data["last_message_id"] = msg.message_id
                context.user_data["step_processed"] = False
            
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=processing_msg.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è '–û–±—Ä–∞–±–æ—Ç–∫–∞...': {e}")
        else:
            logger.info(f"–ö–ª–∏–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É {step} –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—é {current_message_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
